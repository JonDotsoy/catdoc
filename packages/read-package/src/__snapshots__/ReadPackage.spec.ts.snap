// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReadPackage  should print a detail read package 1`] = `
"ReadPackage {
  path: '../../demo',
  toc: ReadToc {
    items: [
      Group {
        keyToc: '$.1',
        title: 'Documentation',
        items: [
          Documentation {
            keyToc: '$.1.1',
            uri: '../../demo/docs/howto.md',
            contentType: 'text/markdown',
            charset: 'utf-8',
            bytes: 586,
            tokens: [
              {
                type: 'heading',
                raw: '# How To\\\\n',
                depth: 1,
                text: 'How To',
                tokens: [ { type: 'text', raw: 'How To', text: 'How To' } ]
              },
              {
                type: 'heading',
                raw: '## Title [a link on header](#demo-3-images)\\\\n\\\\n',
                depth: 2,
                text: 'Title [a link on header](#demo-3-images)',
                tokens: [
                  { type: 'text', raw: 'Title ', text: 'Title ' },
                  {
                    type: 'link',
                    raw: '[a link on header](#demo-3-images)',
                    href: '#demo-3-images',
                    title: null,
                    text: 'a link on header',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'a link on header',
                        text: 'a link on header'
                      }
                    ]
                  }
                ]
              },
              {
                type: 'paragraph',
                raw: 'This is a demo \\"How To Doc\\"',
                text: 'This is a demo \\"How To Doc\\"',
                tokens: [
                  {
                    type: 'text',
                    raw: 'This is a demo \\"How To Doc\\"',
                    text: 'This is a demo &quot;How To Doc&quot;'
                  }
                ]
              },
              { type: 'space', raw: '\\\\n\\\\n' },
              {
                type: 'paragraph',
                raw: 'new Line \`code\`',
                text: 'new Line \`code\`',
                tokens: [
                  { type: 'text', raw: 'new Line ', text: 'new Line ' },
                  { type: 'codespan', raw: '\`code\`', text: 'code' }
                ]
              },
              { type: 'space', raw: '\\\\n\\\\n' },
              {
                type: 'paragraph',
                raw: 'demo code',
                text: 'demo code',
                tokens: [ { type: 'text', raw: 'demo code', text: 'demo code' } ]
              },
              { type: 'space', raw: '\\\\n\\\\n' },
              {
                type: 'code',
                raw: '\`\`\`json\\\\n{ \\"a\\": \\"b\\" }\\\\n\`\`\`\\\\n\\\\n',
                lang: 'json',
                text: '{ \\"a\\": \\"b\\" }'
              },
              { type: 'hr', raw: '---\\\\n\\\\n' },
              {
                type: 'heading',
                raw: '## Demo 2\\\\n\\\\n',
                depth: 2,
                text: 'Demo 2',
                tokens: [ { type: 'text', raw: 'Demo 2', text: 'Demo 2' } ]
              },
              {
                type: 'paragraph',
                raw: 'Demo code 2',
                text: 'Demo code 2',
                tokens: [ { type: 'text', raw: 'Demo code 2', text: 'Demo code 2' } ]
              },
              { type: 'space', raw: '\\\\n\\\\n' },
              {
                type: 'code',
                raw: '\`\`\`code-write\\\\n{\\"a\\":\\"b\\"}\\\\n\`\`\`\\\\n\\\\n',
                lang: 'code-write',
                text: '{\\"a\\":\\"b\\"}'
              },
              {
                type: 'paragraph',
                raw: 'Menu:',
                text: 'Menu:',
                tokens: [ { type: 'text', raw: 'Menu:', text: 'Menu:' } ]
              },
              { type: 'space', raw: '\\\\n\\\\n' },
              {
                type: 'list',
                raw: '- Hola [My Link](http://sample.com/abc/def \\"a title\\")\\\\n' +
                  '- Second Item on List\\\\n' +
                  '\\\\n',
                ordered: false,
                start: '',
                loose: false,
                items: [
                  {
                    type: 'list_item',
                    raw: '- Hola [My Link](http://sample.com/abc/def \\"a title\\")\\\\n',
                    task: false,
                    checked: undefined,
                    loose: false,
                    text: 'Hola [My Link](http://sample.com/abc/def \\"a title\\")',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Hola [My Link](http://sample.com/abc/def \\"a title\\")',
                        text: 'Hola [My Link](http://sample.com/abc/def \\"a title\\")',
                        tokens: [
                          { type: 'text', raw: 'Hola ', text: 'Hola ' },
                          {
                            type: 'link',
                            raw: '[My Link](http://sample.com/abc/def \\"a title\\")',
                            href: 'http://sample.com/abc/def',
                            title: 'a title',
                            text: 'My Link',
                            tokens: [ { type: 'text', raw: 'My Link', text: 'My Link' } ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    type: 'list_item',
                    raw: '- Second Item on List\\\\n\\\\n',
                    task: false,
                    checked: undefined,
                    loose: false,
                    text: 'Second Item on List',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Second Item on List',
                        text: 'Second Item on List',
                        tokens: [
                          {
                            type: 'text',
                            raw: 'Second Item on List',
                            text: 'Second Item on List'
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                type: 'heading',
                raw: '## Demo 3 Images\\\\n\\\\n',
                depth: 2,
                text: 'Demo 3 Images',
                tokens: [ { type: 'text', raw: 'Demo 3 Images', text: 'Demo 3 Images' } ]
              },
              {
                type: 'paragraph',
                raw: '![A Cat](../assets/cat-01.png \\"a text\\")',
                text: '![A Cat](../assets/cat-01.png \\"a text\\")',
                tokens: [
                  {
                    type: 'image',
                    raw: '![A Cat](../assets/cat-01.png \\"a text\\")',
                    href: '/Users/jondotsoy/repositories/jondotsoy/catdoc/demo/assets/cat-01.png',
                    title: 'a text',
                    text: 'A Cat'
                  }
                ]
              },
              { type: 'space', raw: '\\\\n\\\\n' },
              {
                type: 'paragraph',
                raw: '_second cat_',
                text: '_second cat_',
                tokens: [
                  {
                    type: 'em',
                    raw: '_second cat_',
                    text: 'second cat',
                    tokens: [ { type: 'text', raw: 'second cat', text: 'second cat' } ]
                  }
                ]
              },
              { type: 'space', raw: '\\\\n\\\\n' },
              {
                type: 'paragraph',
                raw: '![A Cat 2a](assets/cat-02.png \\"a text to cat 2a\\")',
                text: '![A Cat 2a](assets/cat-02.png \\"a text to cat 2a\\")',
                tokens: [
                  {
                    type: 'image',
                    raw: '![A Cat 2a](assets/cat-02.png \\"a text to cat 2a\\")',
                    href: '/Users/jondotsoy/repositories/jondotsoy/catdoc/demo/docs/assets/cat-02.png',
                    title: 'a text to cat 2a',
                    text: 'A Cat 2a'
                  }
                ]
              },
              { type: 'space', raw: '\\\\n\\\\n' },
              {
                type: 'paragraph',
                raw: '![A Cat 2b](./assets/cat-02.png \\"a text to cat 2b\\")',
                text: '![A Cat 2b](./assets/cat-02.png \\"a text to cat 2b\\")',
                tokens: [
                  {
                    type: 'image',
                    raw: '![A Cat 2b](./assets/cat-02.png \\"a text to cat 2b\\")',
                    href: '/Users/jondotsoy/repositories/jondotsoy/catdoc/demo/docs/assets/cat-02.png',
                    title: 'a text to cat 2b',
                    text: 'A Cat 2b'
                  }
                ]
              },
              { type: 'space', raw: '\\\\n\\\\n' },
              {
                type: 'list',
                raw: '- ![a link 1][reflink]\\\\n' +
                  '- ![a link 2][reflink]\\\\n' +
                  '- ![a link 3][reflink]\\\\n' +
                  '- ![a link 4][reflink]\\\\n' +
                  '\\\\n',
                ordered: false,
                start: '',
                loose: false,
                items: [
                  {
                    type: 'list_item',
                    raw: '- ![a link 1][reflink]\\\\n',
                    task: false,
                    checked: undefined,
                    loose: false,
                    text: '![a link 1][reflink]',
                    tokens: [
                      {
                        type: 'text',
                        raw: '![a link 1][reflink]',
                        text: '![a link 1][reflink]',
                        tokens: [
                          {
                            type: 'image',
                            raw: '![a link 1][reflink]',
                            href: '/Users/jondotsoy/repositories/jondotsoy/catdoc/demo/docs/assets/cat-02.png',
                            title: 'das',
                            text: 'a link 1'
                          }
                        ]
                      }
                    ]
                  },
                  {
                    type: 'list_item',
                    raw: '- ![a link 2][reflink]\\\\n',
                    task: false,
                    checked: undefined,
                    loose: false,
                    text: '![a link 2][reflink]',
                    tokens: [
                      {
                        type: 'text',
                        raw: '![a link 2][reflink]',
                        text: '![a link 2][reflink]',
                        tokens: [
                          {
                            type: 'image',
                            raw: '![a link 2][reflink]',
                            href: '/Users/jondotsoy/repositories/jondotsoy/catdoc/demo/docs/assets/cat-02.png',
                            title: 'das',
                            text: 'a link 2'
                          }
                        ]
                      }
                    ]
                  },
                  {
                    type: 'list_item',
                    raw: '- ![a link 3][reflink]\\\\n',
                    task: false,
                    checked: undefined,
                    loose: false,
                    text: '![a link 3][reflink]',
                    tokens: [
                      {
                        type: 'text',
                        raw: '![a link 3][reflink]',
                        text: '![a link 3][reflink]',
                        tokens: [
                          {
                            type: 'image',
                            raw: '![a link 3][reflink]',
                            href: '/Users/jondotsoy/repositories/jondotsoy/catdoc/demo/docs/assets/cat-02.png',
                            title: 'das',
                            text: 'a link 3'
                          }
                        ]
                      }
                    ]
                  },
                  {
                    type: 'list_item',
                    raw: '- ![a link 4][reflink]\\\\n\\\\n',
                    task: false,
                    checked: undefined,
                    loose: false,
                    text: '![a link 4][reflink]',
                    tokens: [
                      {
                        type: 'text',
                        raw: '![a link 4][reflink]',
                        text: '![a link 4][reflink]',
                        tokens: [
                          {
                            type: 'image',
                            raw: '![a link 4][reflink]',
                            href: '/Users/jondotsoy/repositories/jondotsoy/catdoc/demo/docs/assets/cat-02.png',
                            title: 'das',
                            text: 'a link 4'
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              links: [Object: null prototype] {
                reflink: { href: './assets/cat-02.png', title: 'das' }
              }
            ]
          }
        ]
      },
      Group { keyToc: '$.2', title: 'APIS' },
      Reference {
        keyToc: '$.3',
        uri: '../../demo/reference/hello.yaml',
        contentType: 'text/yaml',
        charset: 'utf-8',
        bytes: 5719,
        api: {
          openapi: '3.1.0',
          info: { title: 'hello', version: '1.0' },
          servers: [ { url: 'http://localhost:3000' } ],
          paths: {
            '/users/{userId}': {
              parameters: [
                {
                  schema: { type: 'integer' },
                  name: 'userId',
                  in: 'path',
                  required: true,
                  description: 'Id of an existing user.'
                }
              ],
              get: {
                summary: 'Get User Info by User ID',
                tags: [],
                responses: {
                  '200': {
                    description: 'User Found',
                    content: {
                      'application/json': {
                        schema: {
                          title: 'User',
                          type: 'object',
                          description: '',
                          examples: [
                            {
                              id: 142,
                              firstName: 'Alice',
                              lastName: 'Smith',
                              email: 'alice.smith@gmail.com',
                              dateOfBirth: '1997-10-31',
                              emailVerified: true,
                              signUpDate: '2019-08-24'
                            }
                          ],
                          properties: {
                            id: {
                              type: 'integer',
                              description: 'Unique identifier for the given user.'
                            },
                            firstName: { type: 'string' },
                            lastName: { type: 'string' },
                            email: { type: 'string', format: 'email' },
                            dateOfBirth: {
                              type: 'string',
                              format: 'date',
                              example: '1997-10-31'
                            },
                            emailVerified: {
                              type: 'boolean',
                              description: \\"Set to true if the user's email has been verified.\\"
                            },
                            createDate: {
                              type: 'string',
                              format: 'date',
                              description: 'The date that the user was created.'
                            }
                          },
                          required: [
                            'id',
                            'firstName',
                            'lastName',
                            'email',
                            'emailVerified'
                          ]
                        },
                        examples: {
                          'Get User Alice Smith': {
                            value: {
                              id: 142,
                              firstName: 'Alice',
                              lastName: 'Smith',
                              email: 'alice.smith@gmail.com',
                              dateOfBirth: '1997-10-31',
                              emailVerified: true,
                              signUpDate: '2019-08-24'
                            }
                          }
                        }
                      }
                    }
                  },
                  '404': { description: 'User Not Found' }
                },
                operationId: 'get-users-userId',
                description: 'Retrieve the information of the user with the matching user ID.'
              },
              patch: {
                summary: 'Update User Information',
                operationId: 'patch-users-userId',
                responses: {
                  '200': {
                    description: 'User Updated',
                    content: {
                      'application/json': {
                        schema: {
                          title: 'User',
                          type: 'object',
                          description: '',
                          examples: [
                            {
                              id: 142,
                              firstName: 'Alice',
                              lastName: 'Smith',
                              email: 'alice.smith@gmail.com',
                              dateOfBirth: '1997-10-31',
                              emailVerified: true,
                              signUpDate: '2019-08-24'
                            }
                          ],
                          properties: {
                            id: {
                              type: 'integer',
                              description: 'Unique identifier for the given user.'
                            },
                            firstName: { type: 'string' },
                            lastName: { type: 'string' },
                            email: { type: 'string', format: 'email' },
                            dateOfBirth: {
                              type: 'string',
                              format: 'date',
                              example: '1997-10-31'
                            },
                            emailVerified: {
                              type: 'boolean',
                              description: \\"Set to true if the user's email has been verified.\\"
                            },
                            createDate: {
                              type: 'string',
                              format: 'date',
                              description: 'The date that the user was created.'
                            }
                          },
                          required: [
                            'id',
                            'firstName',
                            'lastName',
                            'email',
                            'emailVerified'
                          ]
                        },
                        examples: {
                          'Updated User Rebecca Baker': {
                            value: {
                              id: 13,
                              firstName: 'Rebecca',
                              lastName: 'Baker',
                              email: 'rebecca@gmail.com',
                              dateOfBirth: '1985-10-02',
                              emailVerified: false,
                              createDate: '2019-08-24'
                            }
                          }
                        }
                      }
                    }
                  },
                  '404': { description: 'User Not Found' },
                  '409': { description: 'Email Already Taken' }
                },
                description: 'Update the information of an existing user.',
                requestBody: {
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          firstName: { type: 'string' },
                          lastName: { type: 'string' },
                          email: {
                            type: 'string',
                            description: \\"If a new email is given, the user's email verified property will be set to false.\\"
                          },
                          dateOfBirth: { type: 'string' }
                        }
                      },
                      examples: {
                        'Update First Name': { value: { firstName: 'Rebecca' } },
                        'Update Email': { value: { email: 'rebecca@gmail.com' } },
                        'Update Last Name & Date of Birth': {
                          value: { lastName: 'Baker', dateOfBirth: '1985-10-02' }
                        }
                      }
                    }
                  },
                  description: 'Patch user properties to update.'
                }
              }
            },
            '/user': {
              post: {
                summary: 'Create New User',
                operationId: 'post-user',
                responses: {
                  '200': {
                    description: 'User Created',
                    content: {
                      'application/json': {
                        schema: {
                          title: 'User',
                          type: 'object',
                          description: '',
                          examples: [
                            {
                              id: 142,
                              firstName: 'Alice',
                              lastName: 'Smith',
                              email: 'alice.smith@gmail.com',
                              dateOfBirth: '1997-10-31',
                              emailVerified: true,
                              signUpDate: '2019-08-24'
                            }
                          ],
                          properties: {
                            id: {
                              type: 'integer',
                              description: 'Unique identifier for the given user.'
                            },
                            firstName: { type: 'string' },
                            lastName: { type: 'string' },
                            email: { type: 'string', format: 'email' },
                            dateOfBirth: {
                              type: 'string',
                              format: 'date',
                              example: '1997-10-31'
                            },
                            emailVerified: {
                              type: 'boolean',
                              description: \\"Set to true if the user's email has been verified.\\"
                            },
                            createDate: {
                              type: 'string',
                              format: 'date',
                              description: 'The date that the user was created.'
                            }
                          },
                          required: [
                            'id',
                            'firstName',
                            'lastName',
                            'email',
                            'emailVerified'
                          ]
                        },
                        examples: {
                          'New User Bob Fellow': {
                            value: {
                              id: 12,
                              firstName: 'Bob',
                              lastName: 'Fellow',
                              email: 'bob.fellow@gmail.com',
                              dateOfBirth: '1996-08-24',
                              emailVerified: false,
                              createDate: '2020-11-18'
                            }
                          }
                        }
                      }
                    }
                  },
                  '400': { description: 'Missing Required Information' },
                  '409': { description: 'Email Already Taken' }
                },
                requestBody: {
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          firstName: { type: 'string' },
                          lastName: { type: 'string' },
                          email: { type: 'string' },
                          dateOfBirth: { type: 'string', format: 'date' }
                        },
                        required: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
                      },
                      examples: {
                        'Create User Bob Fellow': {
                          value: {
                            firstName: 'Bob',
                            lastName: 'Fellow',
                            email: 'bob.fellow@gmail.com',
                            dateOfBirth: '1996-08-24'
                          }
                        }
                      }
                    }
                  },
                  description: 'Post the necessary fields for the API to create a new user.'
                },
                description: 'Create a new user.'
              }
            },
            '/car': {
              post: {
                summary: 'Create Car',
                operationId: 'post-car',
                responses: {
                  '200': {
                    description: 'Car Section',
                    content: {
                      'application/json': {
                        schema: {
                          '$schema': 'http://json-schema.org/draft-07/schema',
                          type: 'object',
                          title: 'Car',
                          properties: {
                            roles: {
                              type: 'number',
                              title: 'roles',
                              description: 'Roles number'
                            },
                            color: { type: 'string', enum: [ 'red', 'green' ] }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          components: {
            schemas: {
              User: {
                title: 'User',
                type: 'object',
                description: '',
                examples: [
                  {
                    id: 142,
                    firstName: 'Alice',
                    lastName: 'Smith',
                    email: 'alice.smith@gmail.com',
                    dateOfBirth: '1997-10-31',
                    emailVerified: true,
                    signUpDate: '2019-08-24'
                  }
                ],
                properties: {
                  id: {
                    type: 'integer',
                    description: 'Unique identifier for the given user.'
                  },
                  firstName: { type: 'string' },
                  lastName: { type: 'string' },
                  email: { type: 'string', format: 'email' },
                  dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
                  emailVerified: {
                    type: 'boolean',
                    description: \\"Set to true if the user's email has been verified.\\"
                  },
                  createDate: {
                    type: 'string',
                    format: 'date',
                    description: 'The date that the user was created.'
                  }
                },
                required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
              }
            }
          }
        }
      },
      Group {
        keyToc: '$.4',
        title: 'Pokedex',
        items: [
          Reference {
            keyToc: '$.4.1',
            uri: '../../demo/reference/pokedex.yaml',
            contentType: 'text/yaml',
            charset: 'utf-8',
            bytes: 1481,
            api: {
              openapi: '3.0.2',
              info: {
                title: 'API Pokemon',
                description: 'API Pokemon',
                version: '1.0'
              },
              components: {
                schemas: {
                  PokemonInfo: {
                    title: 'asd',
                    type: 'object',
                    properties: {
                      id: { type: 'string' },
                      name: { type: 'string' },
                      stats: {
                        type: 'object',
                        properties: { power: { type: 'number' }, life: { type: 'number' } }
                      }
                    }
                  },
                  PokedexDescriptor: {
                    type: 'object',
                    properties: {
                      pokedexId: { type: 'string' },
                      list: {
                        type: 'array',
                        items: {
                          title: 'asd',
                          type: 'object',
                          properties: {
                            id: { type: 'string' },
                            name: { type: 'string' },
                            stats: {
                              type: 'object',
                              properties: {
                                power: { type: 'number' },
                                life: { type: 'number' }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              paths: {
                '/{playerId}/pokedex': {
                  parameters: [
                    {
                      name: 'playerId',
                      required: true,
                      in: 'path',
                      schema: { type: 'string', default: 'me' }
                    }
                  ],
                  put: {
                    summary: 'update list pokedex',
                    operationId: 'put-pokedex',
                    requestBody: {
                      required: true,
                      content: {
                        'application/json': {
                          schema: {
                            type: 'object',
                            properties: {
                              pokedexId: { type: 'string' },
                              list: {
                                type: 'array',
                                items: {
                                  title: 'asd',
                                  type: 'object',
                                  properties: {
                                    id: { type: 'string' },
                                    name: { type: 'string' },
                                    stats: {
                                      type: 'object',
                                      properties: {
                                        power: { type: 'number' },
                                        life: { type: 'number' }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    responses: {
                      '200': {
                        description: 'OK',
                        content: {
                          'application/json': {
                            schema: {
                              type: 'object',
                              properties: {
                                pokedexId: { type: 'string' },
                                list: {
                                  type: 'array',
                                  items: {
                                    title: 'asd',
                                    type: 'object',
                                    properties: {
                                      id: { type: 'string' },
                                      name: { type: 'string' },
                                      stats: {
                                        type: 'object',
                                        properties: {
                                          power: { type: 'number' },
                                          life: { type: 'number' }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  get: {
                    summary: 'read schema',
                    operationId: 'get-pokedex',
                    responses: {
                      '200': {
                        description: 'OK',
                        content: {
                          'application/json': {
                            schema: {
                              type: 'object',
                              properties: {
                                pokedexId: { type: 'string' },
                                list: {
                                  type: 'array',
                                  items: {
                                    title: 'asd',
                                    type: 'object',
                                    properties: {
                                      id: { type: 'string' },
                                      name: { type: 'string' },
                                      stats: {
                                        type: 'object',
                                        properties: {
                                          power: { type: 'number' },
                                          life: { type: 'number' }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    ]
  }
}"
`;

exports[`ReadPackage  should print a detail read package 2`] = `ReadPackage {}`;

exports[`ReadPackage  should print a detail read package 3`] = `"{}"`;
