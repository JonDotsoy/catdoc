// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Reference  1`] = `
"MapKeyArr {
  pathKeys: Map(5) {
    'openapi' => Map(1) { Symbol(KEY) => Symbol(openapi) },
    'info' => Map(3) {
      'title' => Map(1) { Symbol(KEY) => Symbol(info/title) },
      'version' => Map(1) { Symbol(KEY) => Symbol(info/version) },
      Symbol(KEY) => Symbol(info)
    },
    'servers' => Map(2) {
      '0' => Map(2) {
        'url' => Map(1) { Symbol(KEY) => Symbol(servers/0/url) },
        Symbol(KEY) => Symbol(servers/0)
      },
      Symbol(KEY) => Symbol(servers)
    },
    'paths' => Map(4) {
      '/users/{userId}' => Map(4) {
        'parameters' => Map(2) {
          '0' => Map(6) {
            'schema' => Map(2) {
              'type' => Map(1) {
                Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/schema/type)
              },
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/schema)
            },
            'name' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/name)
            },
            'in' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/in)
            },
            'required' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/required)
            },
            'description' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/description)
            },
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0)
          },
          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters)
        },
        'get' => Map(6) {
          'summary' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/summary)
          },
          'tags' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/tags)
          },
          'responses' => Map(3) {
            '200' => Map(3) {
              'description' => Map(1) {
                Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/description)
              },
              'content' => Map(2) {
                'application/json' => Map(3) {
                  'schema' => Map(7) {
                    'title' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/title)
                    },
                    'type' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/type)
                    },
                    'description' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/description)
                    },
                    'examples' => Map(2) {
                      '0' => Map(7) {
                        'id' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/id)
                        },
                        'firstName' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/firstName)
                        },
                        'lastName' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/lastName)
                        },
                        'email' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/email)
                        },
                        'dateOfBirth' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/dateOfBirth)
                        },
                        'signUpDate' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/signUpDate)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples)
                    },
                    'properties' => Map(8) {
                      'id' => Map(2) {
                        'description' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/id/description)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/id)
                      },
                      'firstName' => Map(2) {
                        'type' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/firstName/type)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/firstName)
                      },
                      'lastName' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/lastName)
                      },
                      'email' => Map(2) {
                        'format' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/email/format)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/email)
                      },
                      'dateOfBirth' => Map(2) {
                        'format' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/dateOfBirth/format)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/dateOfBirth)
                      },
                      'emailVerified' => Map(3) {
                        'type' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/emailVerified/type)
                        },
                        'description' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/emailVerified/description)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/emailVerified)
                      },
                      'createDate' => Map(2) {
                        'description' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/createDate/description)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/createDate)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties)
                    },
                    'required' => Map(5) {
                      '0' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required/0)
                      },
                      '1' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required/1)
                      },
                      '2' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required/2)
                      },
                      '4' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required/4)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema)
                  },
                  'examples' => Map(2) {
                    'Get User Alice Smith' => Map(2) {
                      'value' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/examples/Get%20User%20Alice%20Smith/value)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/examples/Get%20User%20Alice%20Smith)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/examples)
                  },
                  Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson)
                },
                Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content)
              },
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200)
            },
            '404' => Map(2) {
              'description' => Map(1) {
                Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/404/description)
              },
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/404)
            },
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses)
          },
          'operationId' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/operationId)
          },
          'description' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get/description)
          },
          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/get)
        },
        'patch' => Map(6) {
          'summary' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/summary)
          },
          'operationId' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/operationId)
          },
          'responses' => Map(4) {
            '200' => Map(3) {
              'description' => Map(1) {
                Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/description)
              },
              'content' => Map(2) {
                'application/json' => Map(3) {
                  'schema' => Map(4) {
                    'examples' => Map(2) {
                      '0' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/examples/0)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/examples)
                    },
                    'properties' => Map(8) {
                      'id' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/id)
                      },
                      'firstName' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/firstName)
                      },
                      'lastName' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/lastName)
                      },
                      'email' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/email)
                      },
                      'dateOfBirth' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/dateOfBirth)
                      },
                      'emailVerified' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/emailVerified)
                      },
                      'createDate' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/createDate)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties)
                    },
                    'required' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/required)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema)
                  },
                  'examples' => Map(2) {
                    'Updated User Rebecca Baker' => Map(2) {
                      'value' => Map(7) {
                        'id' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/id)
                        },
                        'firstName' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/firstName)
                        },
                        'lastName' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/lastName)
                        },
                        'email' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/email)
                        },
                        'dateOfBirth' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/dateOfBirth)
                        },
                        'emailVerified' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/emailVerified)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples)
                  },
                  Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson)
                },
                Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content)
              },
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200)
            },
            '404' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/404)
            },
            '409' => Map(2) {
              'description' => Map(1) {
                Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/409/description)
              },
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/409)
            },
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses)
          },
          'description' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/description)
          },
          'requestBody' => Map(3) {
            'content' => Map(2) {
              'application/json' => Map(3) {
                'schema' => Map(2) {
                  'properties' => Map(5) {
                    'firstName' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/firstName)
                    },
                    'lastName' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/lastName)
                    },
                    'email' => Map(2) {
                      'description' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/email/description)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/email)
                    },
                    'dateOfBirth' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/dateOfBirth)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties)
                  },
                  Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema)
                },
                'examples' => Map(4) {
                  'Update First Name' => Map(2) {
                    'value' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20First%20Name/value)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20First%20Name)
                  },
                  'Update Email' => Map(2) {
                    'value' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20Email/value)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20Email)
                  },
                  'Update Last Name & Date of Birth' => Map(2) {
                    'value' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20Last%20Name%20%26%20Date%20of%20Birth/value)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20Last%20Name%20%26%20Date%20of%20Birth)
                  },
                  Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples)
                },
                Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson)
              },
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content)
            },
            'description' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/description)
            },
            Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody)
          },
          Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D/patch)
        },
        Symbol(KEY) => Symbol(paths/%2Fusers%2F%7BuserId%7D)
      },
      '/user' => Map(2) {
        'post' => Map(6) {
          'summary' => Map(1) { Symbol(KEY) => Symbol(paths/%2Fuser/post/summary) },
          'operationId' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fuser/post/operationId)
          },
          'responses' => Map(4) {
            '200' => Map(3) {
              'description' => Map(1) {
                Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/description)
              },
              'content' => Map(2) {
                'application/json' => Map(3) {
                  'schema' => Map(4) {
                    'examples' => Map(2) {
                      '0' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/examples/0)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/examples)
                    },
                    'properties' => Map(8) {
                      'id' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/id)
                      },
                      'firstName' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/firstName)
                      },
                      'lastName' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/lastName)
                      },
                      'email' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/email)
                      },
                      'dateOfBirth' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/dateOfBirth)
                      },
                      'emailVerified' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/emailVerified)
                      },
                      'createDate' => Map(1) {
                        Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/createDate)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties)
                    },
                    'required' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/required)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema)
                  },
                  'examples' => Map(2) {
                    'New User Bob Fellow' => Map(2) {
                      'value' => Map(7) {
                        'id' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/id)
                        },
                        'firstName' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/firstName)
                        },
                        'lastName' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/lastName)
                        },
                        'email' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/email)
                        },
                        'dateOfBirth' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/dateOfBirth)
                        },
                        'createDate' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/createDate)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples)
                  },
                  Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson)
                },
                Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200/content)
              },
              Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/200)
            },
            '400' => Map(2) {
              'description' => Map(1) {
                Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/400/description)
              },
              Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/400)
            },
            '409' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fuser/post/responses/409)
            },
            Symbol(KEY) => Symbol(paths/%2Fuser/post/responses)
          },
          'requestBody' => Map(3) {
            'content' => Map(2) {
              'application/json' => Map(3) {
                'schema' => Map(3) {
                  'properties' => Map(5) {
                    'firstName' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties/firstName)
                    },
                    'lastName' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties/lastName)
                    },
                    'email' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties/email)
                    },
                    'dateOfBirth' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties/dateOfBirth)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties)
                  },
                  'required' => Map(2) {
                    '3' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/required/3)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/required)
                  },
                  Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema)
                },
                'examples' => Map(2) {
                  'Create User Bob Fellow' => Map(2) {
                    'value' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/examples/Create%20User%20Bob%20Fellow/value)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/examples/Create%20User%20Bob%20Fellow)
                  },
                  Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/examples)
                },
                Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson)
              },
              Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/content)
            },
            'description' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody/description)
            },
            Symbol(KEY) => Symbol(paths/%2Fuser/post/requestBody)
          },
          'description' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fuser/post/description)
          },
          Symbol(KEY) => Symbol(paths/%2Fuser/post)
        },
        Symbol(KEY) => Symbol(paths/%2Fuser)
      },
      '/car/{lk}' => Map(3) {
        'post' => Map(5) {
          'summary' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/summary)
          },
          'operationId' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/operationId)
          },
          'responses' => Map(2) {
            '200' => Map(3) {
              'description' => Map(1) {
                Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/description)
              },
              'content' => Map(2) {
                'application/json' => Map(2) {
                  'schema' => Map(4) {
                    '$schema' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/%24schema)
                    },
                    'title' => Map(1) {
                      Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/title)
                    },
                    'properties' => Map(3) {
                      'roles' => Map(4) {
                        'type' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/roles/type)
                        },
                        'title' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/roles/title)
                        },
                        'description' => Map(1) {
                          Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/roles/description)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/roles)
                      },
                      'color' => Map(2) {
                        'enum' => Map(3) {
                          '0' => Map(1) {
                            Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/color/enum/0)
                          },
                          '1' => Map(1) {
                            Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/color/enum/1)
                          },
                          Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/color/enum)
                        },
                        Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/color)
                      },
                      Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties)
                    },
                    Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema)
                  },
                  Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson)
                },
                Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content)
              },
              Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200)
            },
            Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses)
          },
          'description' => Map(1) {
            Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post/description)
          },
          Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/post)
        },
        'parameters' => Map(2) {
          '0' => Map(3) {
            'schema' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/parameters/0/schema)
            },
            'name' => Map(1) {
              Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/parameters/0/name)
            },
            Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/parameters/0)
          },
          Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D/parameters)
        },
        Symbol(KEY) => Symbol(paths/%2Fcar%2F%7Blk%7D)
      },
      Symbol(KEY) => Symbol(paths)
    },
    'components' => Map(2) {
      'schemas' => Map(2) {
        'User' => Map(4) {
          'examples' => Map(2) {
            '0' => Map(1) {
              Symbol(KEY) => Symbol(components/schemas/User/examples/0)
            },
            Symbol(KEY) => Symbol(components/schemas/User/examples)
          },
          'properties' => Map(8) {
            'id' => Map(1) {
              Symbol(KEY) => Symbol(components/schemas/User/properties/id)
            },
            'firstName' => Map(1) {
              Symbol(KEY) => Symbol(components/schemas/User/properties/firstName)
            },
            'lastName' => Map(1) {
              Symbol(KEY) => Symbol(components/schemas/User/properties/lastName)
            },
            'email' => Map(1) {
              Symbol(KEY) => Symbol(components/schemas/User/properties/email)
            },
            'dateOfBirth' => Map(1) {
              Symbol(KEY) => Symbol(components/schemas/User/properties/dateOfBirth)
            },
            'emailVerified' => Map(1) {
              Symbol(KEY) => Symbol(components/schemas/User/properties/emailVerified)
            },
            'createDate' => Map(1) {
              Symbol(KEY) => Symbol(components/schemas/User/properties/createDate)
            },
            Symbol(KEY) => Symbol(components/schemas/User/properties)
          },
          'required' => Map(1) {
            Symbol(KEY) => Symbol(components/schemas/User/required)
          },
          Symbol(KEY) => Symbol(components/schemas/User)
        },
        Symbol(KEY) => Symbol(components/schemas)
      },
      Symbol(KEY) => Symbol(components)
    }
  },
  map: Map(204) {
    Symbol(openapi) => { path: [ 'openapi' ], value: '3.1.0' },
    Symbol(info/title) => { path: [ 'info', 'title' ], value: 'hello2' },
    Symbol(info/version) => { path: [ 'info', 'version' ], value: '1.0' },
    Symbol(info) => { path: [ 'info' ], value: { title: 'hello2', version: '1.0' } },
    Symbol(servers/0/url) => { path: [ 'servers', '0', 'url' ], value: 'http://localhost:3000' },
    Symbol(servers/0) => {
      path: [ 'servers', '0' ],
      value: { url: 'http://localhost:3000' }
    },
    Symbol(servers) => {
      path: [ 'servers' ],
      value: [ { url: 'http://localhost:3000' } ]
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/schema/type) => {
      path: [
        'paths',
        '/users/{userId}',
        'parameters',
        '0',
        'schema',
        'type'
      ],
      value: 'integer'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/schema) => {
      path: [ 'paths', '/users/{userId}', 'parameters', '0', 'schema' ],
      value: { type: 'integer' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/name) => {
      path: [ 'paths', '/users/{userId}', 'parameters', '0', 'name' ],
      value: 'userId'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/in) => {
      path: [ 'paths', '/users/{userId}', 'parameters', '0', 'in' ],
      value: 'path'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/required) => {
      path: [ 'paths', '/users/{userId}', 'parameters', '0', 'required' ],
      value: true
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0/description) => {
      path: [ 'paths', '/users/{userId}', 'parameters', '0', 'description' ],
      value: 'Id of an existing **user**.\\\\n'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters/0) => {
      path: [ 'paths', '/users/{userId}', 'parameters', '0' ],
      value: {
        schema: { type: 'integer' },
        name: 'userId',
        in: 'path',
        required: true,
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Id of an existing **user**.',
              text: 'Id of an existing **user**.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Id of an existing ',
                  text: 'Id of an existing '
                },
                {
                  type: 'strong',
                  raw: '**user**',
                  text: 'user',
                  tokens: [ { type: 'text', raw: 'user', text: 'user' } ]
                },
                { type: 'text', raw: '.', text: '.' }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/parameters) => {
      path: [ 'paths', '/users/{userId}', 'parameters' ],
      value: [
        {
          schema: { type: 'integer' },
          name: 'userId',
          in: 'path',
          required: true,
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Id of an existing **user**.',
                text: 'Id of an existing **user**.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Id of an existing ',
                    text: 'Id of an existing '
                  },
                  {
                    type: 'strong',
                    raw: '**user**',
                    text: 'user',
                    tokens: [ { type: 'text', raw: 'user', text: 'user' } ]
                  },
                  { type: 'text', raw: '.', text: '.' }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      ]
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/summary) => {
      path: [ 'paths', '/users/{userId}', 'get', 'summary' ],
      value: 'Get User Info by User ID'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/tags) => { path: [ 'paths', '/users/{userId}', 'get', 'tags' ], value: [] },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'description'
      ],
      value: 'User Found'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/title) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'title'
      ],
      value: 'User'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/type) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'type'
      ],
      value: 'object'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'description'
      ],
      value: ''
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/id) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples',
        '0',
        'id'
      ],
      value: 142
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/firstName) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples',
        '0',
        'firstName'
      ],
      value: 'Alice'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/lastName) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples',
        '0',
        'lastName'
      ],
      value: 'Smith'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/email) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples',
        '0',
        'email'
      ],
      value: 'alice.smith@gmail.com'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/dateOfBirth) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples',
        '0',
        'dateOfBirth'
      ],
      value: '1997-10-31'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0/signUpDate) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples',
        '0',
        'signUpDate'
      ],
      value: '2019-08-24'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples/0) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples',
        '0'
      ],
      value: {
        id: 142,
        firstName: 'Alice',
        lastName: 'Smith',
        email: 'alice.smith@gmail.com',
        dateOfBirth: '1997-10-31',
        emailVerified: true,
        signUpDate: '2019-08-24'
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/examples) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples'
      ],
      value: [
        {
          id: 142,
          firstName: 'Alice',
          lastName: 'Smith',
          email: 'alice.smith@gmail.com',
          dateOfBirth: '1997-10-31',
          emailVerified: true,
          signUpDate: '2019-08-24'
        }
      ]
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/id/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'id',
        'description'
      ],
      value: 'Unique identifier for the given user.'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/id) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'id'
      ],
      value: {
        type: 'integer',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Unique identifier for the given user.',
              text: 'Unique identifier for the given user.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Unique identifier for the given user.',
                  text: 'Unique identifier for the given user.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/firstName/type) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'firstName',
        'type'
      ],
      value: 'string'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/firstName) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'firstName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/lastName) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'lastName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/email/format) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'email',
        'format'
      ],
      value: 'email'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/email) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'email'
      ],
      value: { type: 'string', format: 'email' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/dateOfBirth/format) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'dateOfBirth',
        'format'
      ],
      value: 'date'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/dateOfBirth) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'dateOfBirth'
      ],
      value: { type: 'string', format: 'date', example: '1997-10-31' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/emailVerified/type) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'emailVerified',
        'type'
      ],
      value: 'boolean'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/emailVerified/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'emailVerified',
        'description'
      ],
      value: \\"Set to true if the user's email has been verified.\\"
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/emailVerified) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'emailVerified'
      ],
      value: {
        type: 'boolean',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: \\"Set to true if the user's email has been verified.\\",
              text: \\"Set to true if the user's email has been verified.\\",
              tokens: [
                {
                  type: 'text',
                  raw: \\"Set to true if the user's email has been verified.\\",
                  text: 'Set to true if the user&#39;s email has been verified.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/createDate/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'createDate',
        'description'
      ],
      value: 'The date that the user was created.'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties/createDate) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'createDate'
      ],
      value: {
        type: 'string',
        format: 'date',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'The date that the user was created.',
              text: 'The date that the user was created.',
              tokens: [
                {
                  type: 'text',
                  raw: 'The date that the user was created.',
                  text: 'The date that the user was created.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/properties) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties'
      ],
      value: {
        id: {
          type: 'integer',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Unique identifier for the given user.',
                text: 'Unique identifier for the given user.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Unique identifier for the given user.',
                    text: 'Unique identifier for the given user.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        firstName: { type: 'string' },
        lastName: { type: 'string' },
        email: { type: 'string', format: 'email' },
        dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
        emailVerified: {
          type: 'boolean',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: \\"Set to true if the user's email has been verified.\\",
                text: \\"Set to true if the user's email has been verified.\\",
                tokens: [
                  {
                    type: 'text',
                    raw: \\"Set to true if the user's email has been verified.\\",
                    text: 'Set to true if the user&#39;s email has been verified.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        createDate: {
          type: 'string',
          format: 'date',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'The date that the user was created.',
                text: 'The date that the user was created.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'The date that the user was created.',
                    text: 'The date that the user was created.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required/0) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'required',
        '0'
      ],
      value: 'id'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required/1) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'required',
        '1'
      ],
      value: 'firstName'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required/2) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'required',
        '2'
      ],
      value: 'lastName'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required/4) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'required',
        '4'
      ],
      value: 'emailVerified'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema/required) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'required'
      ],
      value: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/schema) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'schema'
      ],
      value: {
        title: 'User',
        type: 'object',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [ links: [Object: null prototype] {} ],
          links: [Object: null prototype] {}
        },
        examples: [
          {
            id: 142,
            firstName: 'Alice',
            lastName: 'Smith',
            email: 'alice.smith@gmail.com',
            dateOfBirth: '1997-10-31',
            emailVerified: true,
            signUpDate: '2019-08-24'
          }
        ],
        properties: {
          id: {
            type: 'integer',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Unique identifier for the given user.',
                  text: 'Unique identifier for the given user.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Unique identifier for the given user.',
                      text: 'Unique identifier for the given user.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          firstName: { type: 'string' },
          lastName: { type: 'string' },
          email: { type: 'string', format: 'email' },
          dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
          emailVerified: {
            type: 'boolean',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: \\"Set to true if the user's email has been verified.\\",
                  text: \\"Set to true if the user's email has been verified.\\",
                  tokens: [
                    {
                      type: 'text',
                      raw: \\"Set to true if the user's email has been verified.\\",
                      text: 'Set to true if the user&#39;s email has been verified.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          createDate: {
            type: 'string',
            format: 'date',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'The date that the user was created.',
                  text: 'The date that the user was created.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'The date that the user was created.',
                      text: 'The date that the user was created.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        },
        required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/examples/Get%20User%20Alice%20Smith/value) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Get User Alice Smith',
        'value'
      ],
      value: {
        id: 142,
        firstName: 'Alice',
        lastName: 'Smith',
        email: 'alice.smith@gmail.com',
        dateOfBirth: '1997-10-31',
        emailVerified: true,
        signUpDate: '2019-08-24'
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/examples/Get%20User%20Alice%20Smith) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Get User Alice Smith'
      ],
      value: {
        value: {
          id: 142,
          firstName: 'Alice',
          lastName: 'Smith',
          email: 'alice.smith@gmail.com',
          dateOfBirth: '1997-10-31',
          emailVerified: true,
          signUpDate: '2019-08-24'
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson/examples) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json',
        'examples'
      ],
      value: {
        'Get User Alice Smith': {
          value: {
            id: 142,
            firstName: 'Alice',
            lastName: 'Smith',
            email: 'alice.smith@gmail.com',
            dateOfBirth: '1997-10-31',
            emailVerified: true,
            signUpDate: '2019-08-24'
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content/application%2Fjson) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content',
        'application/json'
      ],
      value: {
        schema: {
          title: 'User',
          type: 'object',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [ links: [Object: null prototype] {} ],
            links: [Object: null prototype] {}
          },
          examples: [
            {
              id: 142,
              firstName: 'Alice',
              lastName: 'Smith',
              email: 'alice.smith@gmail.com',
              dateOfBirth: '1997-10-31',
              emailVerified: true,
              signUpDate: '2019-08-24'
            }
          ],
          properties: {
            id: {
              type: 'integer',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Unique identifier for the given user.',
                    text: 'Unique identifier for the given user.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Unique identifier for the given user.',
                        text: 'Unique identifier for the given user.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            firstName: { type: 'string' },
            lastName: { type: 'string' },
            email: { type: 'string', format: 'email' },
            dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
            emailVerified: {
              type: 'boolean',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: \\"Set to true if the user's email has been verified.\\",
                    text: \\"Set to true if the user's email has been verified.\\",
                    tokens: [
                      {
                        type: 'text',
                        raw: \\"Set to true if the user's email has been verified.\\",
                        text: 'Set to true if the user&#39;s email has been verified.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            createDate: {
              type: 'string',
              format: 'date',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'The date that the user was created.',
                    text: 'The date that the user was created.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'The date that the user was created.',
                        text: 'The date that the user was created.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
        },
        examples: {
          'Get User Alice Smith': {
            value: {
              id: 142,
              firstName: 'Alice',
              lastName: 'Smith',
              email: 'alice.smith@gmail.com',
              dateOfBirth: '1997-10-31',
              emailVerified: true,
              signUpDate: '2019-08-24'
            }
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200/content) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '200',
        'content'
      ],
      value: {
        'application/json': {
          schema: {
            title: 'User',
            type: 'object',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [ links: [Object: null prototype] {} ],
              links: [Object: null prototype] {}
            },
            examples: [
              {
                id: 142,
                firstName: 'Alice',
                lastName: 'Smith',
                email: 'alice.smith@gmail.com',
                dateOfBirth: '1997-10-31',
                emailVerified: true,
                signUpDate: '2019-08-24'
              }
            ],
            properties: {
              id: {
                type: 'integer',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'Unique identifier for the given user.',
                      text: 'Unique identifier for the given user.',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'Unique identifier for the given user.',
                          text: 'Unique identifier for the given user.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              firstName: { type: 'string' },
              lastName: { type: 'string' },
              email: { type: 'string', format: 'email' },
              dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
              emailVerified: {
                type: 'boolean',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: \\"Set to true if the user's email has been verified.\\",
                      text: \\"Set to true if the user's email has been verified.\\",
                      tokens: [
                        {
                          type: 'text',
                          raw: \\"Set to true if the user's email has been verified.\\",
                          text: 'Set to true if the user&#39;s email has been verified.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              createDate: {
                type: 'string',
                format: 'date',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'The date that the user was created.',
                      text: 'The date that the user was created.',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'The date that the user was created.',
                          text: 'The date that the user was created.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              }
            },
            required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
          },
          examples: {
            'Get User Alice Smith': {
              value: {
                id: 142,
                firstName: 'Alice',
                lastName: 'Smith',
                email: 'alice.smith@gmail.com',
                dateOfBirth: '1997-10-31',
                emailVerified: true,
                signUpDate: '2019-08-24'
              }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/200) => {
      path: [ 'paths', '/users/{userId}', 'get', 'responses', '200' ],
      value: {
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'User Found',
              text: 'User Found',
              tokens: [ { type: 'text', raw: 'User Found', text: 'User Found' } ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        },
        content: {
          'application/json': {
            schema: {
              title: 'User',
              type: 'object',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [ links: [Object: null prototype] {} ],
                links: [Object: null prototype] {}
              },
              examples: [
                {
                  id: 142,
                  firstName: 'Alice',
                  lastName: 'Smith',
                  email: 'alice.smith@gmail.com',
                  dateOfBirth: '1997-10-31',
                  emailVerified: true,
                  signUpDate: '2019-08-24'
                }
              ],
              properties: {
                id: {
                  type: 'integer',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: 'Unique identifier for the given user.',
                        text: 'Unique identifier for the given user.',
                        tokens: [
                          {
                            type: 'text',
                            raw: 'Unique identifier for the given user.',
                            text: 'Unique identifier for the given user.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                },
                firstName: { type: 'string' },
                lastName: { type: 'string' },
                email: { type: 'string', format: 'email' },
                dateOfBirth: {
                  type: 'string',
                  format: 'date',
                  example: '1997-10-31'
                },
                emailVerified: {
                  type: 'boolean',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: \\"Set to true if the user's email has been verified.\\",
                        text: \\"Set to true if the user's email has been verified.\\",
                        tokens: [
                          {
                            type: 'text',
                            raw: \\"Set to true if the user's email has been verified.\\",
                            text: 'Set to true if the user&#39;s email has been verified.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                },
                createDate: {
                  type: 'string',
                  format: 'date',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: 'The date that the user was created.',
                        text: 'The date that the user was created.',
                        tokens: [
                          {
                            type: 'text',
                            raw: 'The date that the user was created.',
                            text: 'The date that the user was created.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                }
              },
              required: [
                'id',
                'firstName',
                'lastName',
                'email',
                'emailVerified'
              ]
            },
            examples: {
              'Get User Alice Smith': {
                value: {
                  id: 142,
                  firstName: 'Alice',
                  lastName: 'Smith',
                  email: 'alice.smith@gmail.com',
                  dateOfBirth: '1997-10-31',
                  emailVerified: true,
                  signUpDate: '2019-08-24'
                }
              }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/404/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'get',
        'responses',
        '404',
        'description'
      ],
      value: 'User Not Found'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses/404) => {
      path: [ 'paths', '/users/{userId}', 'get', 'responses', '404' ],
      value: {
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'User Not Found',
              text: 'User Not Found',
              tokens: [
                { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/responses) => {
      path: [ 'paths', '/users/{userId}', 'get', 'responses' ],
      value: {
        '200': {
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'User Found',
                text: 'User Found',
                tokens: [ { type: 'text', raw: 'User Found', text: 'User Found' } ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          },
          content: {
            'application/json': {
              schema: {
                title: 'User',
                type: 'object',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [ links: [Object: null prototype] {} ],
                  links: [Object: null prototype] {}
                },
                examples: [
                  {
                    id: 142,
                    firstName: 'Alice',
                    lastName: 'Smith',
                    email: 'alice.smith@gmail.com',
                    dateOfBirth: '1997-10-31',
                    emailVerified: true,
                    signUpDate: '2019-08-24'
                  }
                ],
                properties: {
                  id: {
                    type: 'integer',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: 'Unique identifier for the given user.',
                          text: 'Unique identifier for the given user.',
                          tokens: [
                            {
                              type: 'text',
                              raw: 'Unique identifier for the given user.',
                              text: 'Unique identifier for the given user.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  },
                  firstName: { type: 'string' },
                  lastName: { type: 'string' },
                  email: { type: 'string', format: 'email' },
                  dateOfBirth: {
                    type: 'string',
                    format: 'date',
                    example: '1997-10-31'
                  },
                  emailVerified: {
                    type: 'boolean',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: \\"Set to true if the user's email has been verified.\\",
                          text: \\"Set to true if the user's email has been verified.\\",
                          tokens: [
                            {
                              type: 'text',
                              raw: \\"Set to true if the user's email has been verified.\\",
                              text: 'Set to true if the user&#39;s email has been verified.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  },
                  createDate: {
                    type: 'string',
                    format: 'date',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: 'The date that the user was created.',
                          text: 'The date that the user was created.',
                          tokens: [
                            {
                              type: 'text',
                              raw: 'The date that the user was created.',
                              text: 'The date that the user was created.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  }
                },
                required: [
                  'id',
                  'firstName',
                  'lastName',
                  'email',
                  'emailVerified'
                ]
              },
              examples: {
                'Get User Alice Smith': {
                  value: {
                    id: 142,
                    firstName: 'Alice',
                    lastName: 'Smith',
                    email: 'alice.smith@gmail.com',
                    dateOfBirth: '1997-10-31',
                    emailVerified: true,
                    signUpDate: '2019-08-24'
                  }
                }
              }
            }
          }
        },
        '404': {
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'User Not Found',
                text: 'User Not Found',
                tokens: [
                  { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/operationId) => {
      path: [ 'paths', '/users/{userId}', 'get', 'operationId' ],
      value: 'get-users-userId'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get/description) => {
      path: [ 'paths', '/users/{userId}', 'get', 'description' ],
      value: 'Retrieve the information of the user with the matching user ID.'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/get) => {
      path: [ 'paths', '/users/{userId}', 'get' ],
      value: {
        summary: 'Get User Info by User ID',
        tags: [],
        responses: {
          '200': {
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'User Found',
                  text: 'User Found',
                  tokens: [ { type: 'text', raw: 'User Found', text: 'User Found' } ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            },
            content: {
              'application/json': {
                schema: {
                  title: 'User',
                  type: 'object',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [ links: [Object: null prototype] {} ],
                    links: [Object: null prototype] {}
                  },
                  examples: [
                    {
                      id: 142,
                      firstName: 'Alice',
                      lastName: 'Smith',
                      email: 'alice.smith@gmail.com',
                      dateOfBirth: '1997-10-31',
                      emailVerified: true,
                      signUpDate: '2019-08-24'
                    }
                  ],
                  properties: {
                    id: {
                      type: 'integer',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: 'Unique identifier for the given user.',
                            text: 'Unique identifier for the given user.',
                            tokens: [
                              {
                                type: 'text',
                                raw: 'Unique identifier for the given user.',
                                text: 'Unique identifier for the given user.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    },
                    firstName: { type: 'string' },
                    lastName: { type: 'string' },
                    email: { type: 'string', format: 'email' },
                    dateOfBirth: {
                      type: 'string',
                      format: 'date',
                      example: '1997-10-31'
                    },
                    emailVerified: {
                      type: 'boolean',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: \\"Set to true if the user's email has been verified.\\",
                            text: \\"Set to true if the user's email has been verified.\\",
                            tokens: [
                              {
                                type: 'text',
                                raw: \\"Set to true if the user's email has been verified.\\",
                                text: 'Set to true if the user&#39;s email has been verified.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    },
                    createDate: {
                      type: 'string',
                      format: 'date',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: 'The date that the user was created.',
                            text: 'The date that the user was created.',
                            tokens: [
                              {
                                type: 'text',
                                raw: 'The date that the user was created.',
                                text: 'The date that the user was created.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    }
                  },
                  required: [
                    'id',
                    'firstName',
                    'lastName',
                    'email',
                    'emailVerified'
                  ]
                },
                examples: {
                  'Get User Alice Smith': {
                    value: {
                      id: 142,
                      firstName: 'Alice',
                      lastName: 'Smith',
                      email: 'alice.smith@gmail.com',
                      dateOfBirth: '1997-10-31',
                      emailVerified: true,
                      signUpDate: '2019-08-24'
                    }
                  }
                }
              }
            }
          },
          '404': {
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'User Not Found',
                  text: 'User Not Found',
                  tokens: [
                    { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        },
        operationId: 'get-users-userId',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Retrieve the information of the user with the matching user ID.',
              text: 'Retrieve the information of the user with the matching user ID.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Retrieve the information of the user with the matching user ID.',
                  text: 'Retrieve the information of the user with the matching user ID.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/summary) => {
      path: [ 'paths', '/users/{userId}', 'patch', 'summary' ],
      value: 'Update User Information'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/operationId) => {
      path: [ 'paths', '/users/{userId}', 'patch', 'operationId' ],
      value: 'patch-users-userId'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'description'
      ],
      value: 'User Updated'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/examples/0) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples',
        '0'
      ],
      value: {
        id: 142,
        firstName: 'Alice',
        lastName: 'Smith',
        email: 'alice.smith@gmail.com',
        dateOfBirth: '1997-10-31',
        emailVerified: true,
        signUpDate: '2019-08-24'
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/examples) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples'
      ],
      value: [
        {
          id: 142,
          firstName: 'Alice',
          lastName: 'Smith',
          email: 'alice.smith@gmail.com',
          dateOfBirth: '1997-10-31',
          emailVerified: true,
          signUpDate: '2019-08-24'
        }
      ]
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/id) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'id'
      ],
      value: {
        type: 'integer',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Unique identifier for the given user.',
              text: 'Unique identifier for the given user.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Unique identifier for the given user.',
                  text: 'Unique identifier for the given user.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/firstName) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'firstName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/lastName) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'lastName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/email) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'email'
      ],
      value: { type: 'string', format: 'email' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/dateOfBirth) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'dateOfBirth'
      ],
      value: { type: 'string', format: 'date', example: '1997-10-31' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/emailVerified) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'emailVerified'
      ],
      value: {
        type: 'boolean',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: \\"Set to true if the user's email has been verified.\\",
              text: \\"Set to true if the user's email has been verified.\\",
              tokens: [
                {
                  type: 'text',
                  raw: \\"Set to true if the user's email has been verified.\\",
                  text: 'Set to true if the user&#39;s email has been verified.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties/createDate) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'createDate'
      ],
      value: {
        type: 'string',
        format: 'date',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'The date that the user was created.',
              text: 'The date that the user was created.',
              tokens: [
                {
                  type: 'text',
                  raw: 'The date that the user was created.',
                  text: 'The date that the user was created.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/properties) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties'
      ],
      value: {
        id: {
          type: 'integer',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Unique identifier for the given user.',
                text: 'Unique identifier for the given user.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Unique identifier for the given user.',
                    text: 'Unique identifier for the given user.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        firstName: { type: 'string' },
        lastName: { type: 'string' },
        email: { type: 'string', format: 'email' },
        dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
        emailVerified: {
          type: 'boolean',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: \\"Set to true if the user's email has been verified.\\",
                text: \\"Set to true if the user's email has been verified.\\",
                tokens: [
                  {
                    type: 'text',
                    raw: \\"Set to true if the user's email has been verified.\\",
                    text: 'Set to true if the user&#39;s email has been verified.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        createDate: {
          type: 'string',
          format: 'date',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'The date that the user was created.',
                text: 'The date that the user was created.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'The date that the user was created.',
                    text: 'The date that the user was created.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema/required) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'required'
      ],
      value: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/schema) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'schema'
      ],
      value: {
        title: 'User',
        type: 'object',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [ links: [Object: null prototype] {} ],
          links: [Object: null prototype] {}
        },
        examples: [
          {
            id: 142,
            firstName: 'Alice',
            lastName: 'Smith',
            email: 'alice.smith@gmail.com',
            dateOfBirth: '1997-10-31',
            emailVerified: true,
            signUpDate: '2019-08-24'
          }
        ],
        properties: {
          id: {
            type: 'integer',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Unique identifier for the given user.',
                  text: 'Unique identifier for the given user.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Unique identifier for the given user.',
                      text: 'Unique identifier for the given user.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          firstName: { type: 'string' },
          lastName: { type: 'string' },
          email: { type: 'string', format: 'email' },
          dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
          emailVerified: {
            type: 'boolean',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: \\"Set to true if the user's email has been verified.\\",
                  text: \\"Set to true if the user's email has been verified.\\",
                  tokens: [
                    {
                      type: 'text',
                      raw: \\"Set to true if the user's email has been verified.\\",
                      text: 'Set to true if the user&#39;s email has been verified.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          createDate: {
            type: 'string',
            format: 'date',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'The date that the user was created.',
                  text: 'The date that the user was created.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'The date that the user was created.',
                      text: 'The date that the user was created.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        },
        required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/id) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Updated User Rebecca Baker',
        'value',
        'id'
      ],
      value: 13
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/firstName) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Updated User Rebecca Baker',
        'value',
        'firstName'
      ],
      value: 'Rebecca'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/lastName) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Updated User Rebecca Baker',
        'value',
        'lastName'
      ],
      value: 'Baker'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/email) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Updated User Rebecca Baker',
        'value',
        'email'
      ],
      value: 'rebecca@gmail.com'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/dateOfBirth) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Updated User Rebecca Baker',
        'value',
        'dateOfBirth'
      ],
      value: '1985-10-02'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value/emailVerified) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Updated User Rebecca Baker',
        'value',
        'emailVerified'
      ],
      value: false
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker/value) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Updated User Rebecca Baker',
        'value'
      ],
      value: {
        id: 13,
        firstName: 'Rebecca',
        lastName: 'Baker',
        email: 'rebecca@gmail.com',
        dateOfBirth: '1985-10-02',
        emailVerified: false,
        createDate: '2019-08-24'
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples/Updated%20User%20Rebecca%20Baker) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'Updated User Rebecca Baker'
      ],
      value: {
        value: {
          id: 13,
          firstName: 'Rebecca',
          lastName: 'Baker',
          email: 'rebecca@gmail.com',
          dateOfBirth: '1985-10-02',
          emailVerified: false,
          createDate: '2019-08-24'
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson/examples) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json',
        'examples'
      ],
      value: {
        'Updated User Rebecca Baker': {
          value: {
            id: 13,
            firstName: 'Rebecca',
            lastName: 'Baker',
            email: 'rebecca@gmail.com',
            dateOfBirth: '1985-10-02',
            emailVerified: false,
            createDate: '2019-08-24'
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content/application%2Fjson) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content',
        'application/json'
      ],
      value: {
        schema: {
          title: 'User',
          type: 'object',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [ links: [Object: null prototype] {} ],
            links: [Object: null prototype] {}
          },
          examples: [
            {
              id: 142,
              firstName: 'Alice',
              lastName: 'Smith',
              email: 'alice.smith@gmail.com',
              dateOfBirth: '1997-10-31',
              emailVerified: true,
              signUpDate: '2019-08-24'
            }
          ],
          properties: {
            id: {
              type: 'integer',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Unique identifier for the given user.',
                    text: 'Unique identifier for the given user.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Unique identifier for the given user.',
                        text: 'Unique identifier for the given user.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            firstName: { type: 'string' },
            lastName: { type: 'string' },
            email: { type: 'string', format: 'email' },
            dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
            emailVerified: {
              type: 'boolean',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: \\"Set to true if the user's email has been verified.\\",
                    text: \\"Set to true if the user's email has been verified.\\",
                    tokens: [
                      {
                        type: 'text',
                        raw: \\"Set to true if the user's email has been verified.\\",
                        text: 'Set to true if the user&#39;s email has been verified.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            createDate: {
              type: 'string',
              format: 'date',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'The date that the user was created.',
                    text: 'The date that the user was created.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'The date that the user was created.',
                        text: 'The date that the user was created.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
        },
        examples: {
          'Updated User Rebecca Baker': {
            value: {
              id: 13,
              firstName: 'Rebecca',
              lastName: 'Baker',
              email: 'rebecca@gmail.com',
              dateOfBirth: '1985-10-02',
              emailVerified: false,
              createDate: '2019-08-24'
            }
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200/content) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '200',
        'content'
      ],
      value: {
        'application/json': {
          schema: {
            title: 'User',
            type: 'object',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [ links: [Object: null prototype] {} ],
              links: [Object: null prototype] {}
            },
            examples: [
              {
                id: 142,
                firstName: 'Alice',
                lastName: 'Smith',
                email: 'alice.smith@gmail.com',
                dateOfBirth: '1997-10-31',
                emailVerified: true,
                signUpDate: '2019-08-24'
              }
            ],
            properties: {
              id: {
                type: 'integer',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'Unique identifier for the given user.',
                      text: 'Unique identifier for the given user.',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'Unique identifier for the given user.',
                          text: 'Unique identifier for the given user.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              firstName: { type: 'string' },
              lastName: { type: 'string' },
              email: { type: 'string', format: 'email' },
              dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
              emailVerified: {
                type: 'boolean',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: \\"Set to true if the user's email has been verified.\\",
                      text: \\"Set to true if the user's email has been verified.\\",
                      tokens: [
                        {
                          type: 'text',
                          raw: \\"Set to true if the user's email has been verified.\\",
                          text: 'Set to true if the user&#39;s email has been verified.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              createDate: {
                type: 'string',
                format: 'date',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'The date that the user was created.',
                      text: 'The date that the user was created.',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'The date that the user was created.',
                          text: 'The date that the user was created.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              }
            },
            required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
          },
          examples: {
            'Updated User Rebecca Baker': {
              value: {
                id: 13,
                firstName: 'Rebecca',
                lastName: 'Baker',
                email: 'rebecca@gmail.com',
                dateOfBirth: '1985-10-02',
                emailVerified: false,
                createDate: '2019-08-24'
              }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/200) => {
      path: [ 'paths', '/users/{userId}', 'patch', 'responses', '200' ],
      value: {
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'User Updated',
              text: 'User Updated',
              tokens: [ { type: 'text', raw: 'User Updated', text: 'User Updated' } ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        },
        content: {
          'application/json': {
            schema: {
              title: 'User',
              type: 'object',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [ links: [Object: null prototype] {} ],
                links: [Object: null prototype] {}
              },
              examples: [
                {
                  id: 142,
                  firstName: 'Alice',
                  lastName: 'Smith',
                  email: 'alice.smith@gmail.com',
                  dateOfBirth: '1997-10-31',
                  emailVerified: true,
                  signUpDate: '2019-08-24'
                }
              ],
              properties: {
                id: {
                  type: 'integer',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: 'Unique identifier for the given user.',
                        text: 'Unique identifier for the given user.',
                        tokens: [
                          {
                            type: 'text',
                            raw: 'Unique identifier for the given user.',
                            text: 'Unique identifier for the given user.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                },
                firstName: { type: 'string' },
                lastName: { type: 'string' },
                email: { type: 'string', format: 'email' },
                dateOfBirth: {
                  type: 'string',
                  format: 'date',
                  example: '1997-10-31'
                },
                emailVerified: {
                  type: 'boolean',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: \\"Set to true if the user's email has been verified.\\",
                        text: \\"Set to true if the user's email has been verified.\\",
                        tokens: [
                          {
                            type: 'text',
                            raw: \\"Set to true if the user's email has been verified.\\",
                            text: 'Set to true if the user&#39;s email has been verified.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                },
                createDate: {
                  type: 'string',
                  format: 'date',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: 'The date that the user was created.',
                        text: 'The date that the user was created.',
                        tokens: [
                          {
                            type: 'text',
                            raw: 'The date that the user was created.',
                            text: 'The date that the user was created.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                }
              },
              required: [
                'id',
                'firstName',
                'lastName',
                'email',
                'emailVerified'
              ]
            },
            examples: {
              'Updated User Rebecca Baker': {
                value: {
                  id: 13,
                  firstName: 'Rebecca',
                  lastName: 'Baker',
                  email: 'rebecca@gmail.com',
                  dateOfBirth: '1985-10-02',
                  emailVerified: false,
                  createDate: '2019-08-24'
                }
              }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/404) => {
      path: [ 'paths', '/users/{userId}', 'patch', 'responses', '404' ],
      value: {
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'User Not Found',
              text: 'User Not Found',
              tokens: [
                { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/409/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'responses',
        '409',
        'description'
      ],
      value: 'Email Already Taken'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses/409) => {
      path: [ 'paths', '/users/{userId}', 'patch', 'responses', '409' ],
      value: {
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Email Already Taken',
              text: 'Email Already Taken',
              tokens: [
                {
                  type: 'text',
                  raw: 'Email Already Taken',
                  text: 'Email Already Taken'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/responses) => {
      path: [ 'paths', '/users/{userId}', 'patch', 'responses' ],
      value: {
        '200': {
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'User Updated',
                text: 'User Updated',
                tokens: [ { type: 'text', raw: 'User Updated', text: 'User Updated' } ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          },
          content: {
            'application/json': {
              schema: {
                title: 'User',
                type: 'object',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [ links: [Object: null prototype] {} ],
                  links: [Object: null prototype] {}
                },
                examples: [
                  {
                    id: 142,
                    firstName: 'Alice',
                    lastName: 'Smith',
                    email: 'alice.smith@gmail.com',
                    dateOfBirth: '1997-10-31',
                    emailVerified: true,
                    signUpDate: '2019-08-24'
                  }
                ],
                properties: {
                  id: {
                    type: 'integer',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: 'Unique identifier for the given user.',
                          text: 'Unique identifier for the given user.',
                          tokens: [
                            {
                              type: 'text',
                              raw: 'Unique identifier for the given user.',
                              text: 'Unique identifier for the given user.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  },
                  firstName: { type: 'string' },
                  lastName: { type: 'string' },
                  email: { type: 'string', format: 'email' },
                  dateOfBirth: {
                    type: 'string',
                    format: 'date',
                    example: '1997-10-31'
                  },
                  emailVerified: {
                    type: 'boolean',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: \\"Set to true if the user's email has been verified.\\",
                          text: \\"Set to true if the user's email has been verified.\\",
                          tokens: [
                            {
                              type: 'text',
                              raw: \\"Set to true if the user's email has been verified.\\",
                              text: 'Set to true if the user&#39;s email has been verified.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  },
                  createDate: {
                    type: 'string',
                    format: 'date',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: 'The date that the user was created.',
                          text: 'The date that the user was created.',
                          tokens: [
                            {
                              type: 'text',
                              raw: 'The date that the user was created.',
                              text: 'The date that the user was created.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  }
                },
                required: [
                  'id',
                  'firstName',
                  'lastName',
                  'email',
                  'emailVerified'
                ]
              },
              examples: {
                'Updated User Rebecca Baker': {
                  value: {
                    id: 13,
                    firstName: 'Rebecca',
                    lastName: 'Baker',
                    email: 'rebecca@gmail.com',
                    dateOfBirth: '1985-10-02',
                    emailVerified: false,
                    createDate: '2019-08-24'
                  }
                }
              }
            }
          }
        },
        '404': {
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'User Not Found',
                text: 'User Not Found',
                tokens: [
                  { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        '409': {
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Email Already Taken',
                text: 'Email Already Taken',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Email Already Taken',
                    text: 'Email Already Taken'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/description) => {
      path: [ 'paths', '/users/{userId}', 'patch', 'description' ],
      value: 'Update the information of an existing user.'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/firstName) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties',
        'firstName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/lastName) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties',
        'lastName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/email/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties',
        'email',
        'description'
      ],
      value: \\"If a new email is given, the user's email verified property will be set to false.\\"
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/email) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties',
        'email'
      ],
      value: {
        type: 'string',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
              text: \\"If a new email is given, the user's email verified property will be set to false.\\",
              tokens: [
                {
                  type: 'text',
                  raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                  text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties/dateOfBirth) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties',
        'dateOfBirth'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema/properties) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties'
      ],
      value: {
        firstName: { type: 'string' },
        lastName: { type: 'string' },
        email: {
          type: 'string',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                text: \\"If a new email is given, the user's email verified property will be set to false.\\",
                tokens: [
                  {
                    type: 'text',
                    raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                    text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        dateOfBirth: { type: 'string' }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/schema) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'schema'
      ],
      value: {
        type: 'object',
        properties: {
          firstName: { type: 'string' },
          lastName: { type: 'string' },
          email: {
            type: 'string',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                  text: \\"If a new email is given, the user's email verified property will be set to false.\\",
                  tokens: [
                    {
                      type: 'text',
                      raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                      text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          dateOfBirth: { type: 'string' }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20First%20Name/value) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'examples',
        'Update First Name',
        'value'
      ],
      value: { firstName: 'Rebecca' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20First%20Name) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'examples',
        'Update First Name'
      ],
      value: { value: { firstName: 'Rebecca' } }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20Email/value) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'examples',
        'Update Email',
        'value'
      ],
      value: { email: 'rebecca@gmail.com' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20Email) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'examples',
        'Update Email'
      ],
      value: { value: { email: 'rebecca@gmail.com' } }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20Last%20Name%20%26%20Date%20of%20Birth/value) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'examples',
        'Update Last Name & Date of Birth',
        'value'
      ],
      value: { lastName: 'Baker', dateOfBirth: '1985-10-02' }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples/Update%20Last%20Name%20%26%20Date%20of%20Birth) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'examples',
        'Update Last Name & Date of Birth'
      ],
      value: { value: { lastName: 'Baker', dateOfBirth: '1985-10-02' } }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson/examples) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json',
        'examples'
      ],
      value: {
        'Update First Name': { value: { firstName: 'Rebecca' } },
        'Update Email': { value: { email: 'rebecca@gmail.com' } },
        'Update Last Name & Date of Birth': { value: { lastName: 'Baker', dateOfBirth: '1985-10-02' } }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content/application%2Fjson) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'content',
        'application/json'
      ],
      value: {
        schema: {
          type: 'object',
          properties: {
            firstName: { type: 'string' },
            lastName: { type: 'string' },
            email: {
              type: 'string',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                    text: \\"If a new email is given, the user's email verified property will be set to false.\\",
                    tokens: [
                      {
                        type: 'text',
                        raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                        text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            dateOfBirth: { type: 'string' }
          }
        },
        examples: {
          'Update First Name': { value: { firstName: 'Rebecca' } },
          'Update Email': { value: { email: 'rebecca@gmail.com' } },
          'Update Last Name & Date of Birth': { value: { lastName: 'Baker', dateOfBirth: '1985-10-02' } }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/content) => {
      path: [ 'paths', '/users/{userId}', 'patch', 'requestBody', 'content' ],
      value: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              firstName: { type: 'string' },
              lastName: { type: 'string' },
              email: {
                type: 'string',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                      text: \\"If a new email is given, the user's email verified property will be set to false.\\",
                      tokens: [
                        {
                          type: 'text',
                          raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                          text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              dateOfBirth: { type: 'string' }
            }
          },
          examples: {
            'Update First Name': { value: { firstName: 'Rebecca' } },
            'Update Email': { value: { email: 'rebecca@gmail.com' } },
            'Update Last Name & Date of Birth': { value: { lastName: 'Baker', dateOfBirth: '1985-10-02' } }
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody/description) => {
      path: [
        'paths',
        '/users/{userId}',
        'patch',
        'requestBody',
        'description'
      ],
      value: 'Patch user properties to update.'
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch/requestBody) => {
      path: [ 'paths', '/users/{userId}', 'patch', 'requestBody' ],
      value: {
        content: {
          'application/json': {
            schema: {
              type: 'object',
              properties: {
                firstName: { type: 'string' },
                lastName: { type: 'string' },
                email: {
                  type: 'string',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                        text: \\"If a new email is given, the user's email verified property will be set to false.\\",
                        tokens: [
                          {
                            type: 'text',
                            raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                            text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                },
                dateOfBirth: { type: 'string' }
              }
            },
            examples: {
              'Update First Name': { value: { firstName: 'Rebecca' } },
              'Update Email': { value: { email: 'rebecca@gmail.com' } },
              'Update Last Name & Date of Birth': {
                value: { lastName: 'Baker', dateOfBirth: '1985-10-02' }
              }
            }
          }
        },
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Patch user properties to update.',
              text: 'Patch user properties to update.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Patch user properties to update.',
                  text: 'Patch user properties to update.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D/patch) => {
      path: [ 'paths', '/users/{userId}', 'patch' ],
      value: {
        summary: 'Update User Information',
        operationId: 'patch-users-userId',
        responses: {
          '200': {
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'User Updated',
                  text: 'User Updated',
                  tokens: [ { type: 'text', raw: 'User Updated', text: 'User Updated' } ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            },
            content: {
              'application/json': {
                schema: {
                  title: 'User',
                  type: 'object',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [ links: [Object: null prototype] {} ],
                    links: [Object: null prototype] {}
                  },
                  examples: [
                    {
                      id: 142,
                      firstName: 'Alice',
                      lastName: 'Smith',
                      email: 'alice.smith@gmail.com',
                      dateOfBirth: '1997-10-31',
                      emailVerified: true,
                      signUpDate: '2019-08-24'
                    }
                  ],
                  properties: {
                    id: {
                      type: 'integer',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: 'Unique identifier for the given user.',
                            text: 'Unique identifier for the given user.',
                            tokens: [
                              {
                                type: 'text',
                                raw: 'Unique identifier for the given user.',
                                text: 'Unique identifier for the given user.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    },
                    firstName: { type: 'string' },
                    lastName: { type: 'string' },
                    email: { type: 'string', format: 'email' },
                    dateOfBirth: {
                      type: 'string',
                      format: 'date',
                      example: '1997-10-31'
                    },
                    emailVerified: {
                      type: 'boolean',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: \\"Set to true if the user's email has been verified.\\",
                            text: \\"Set to true if the user's email has been verified.\\",
                            tokens: [
                              {
                                type: 'text',
                                raw: \\"Set to true if the user's email has been verified.\\",
                                text: 'Set to true if the user&#39;s email has been verified.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    },
                    createDate: {
                      type: 'string',
                      format: 'date',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: 'The date that the user was created.',
                            text: 'The date that the user was created.',
                            tokens: [
                              {
                                type: 'text',
                                raw: 'The date that the user was created.',
                                text: 'The date that the user was created.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    }
                  },
                  required: [
                    'id',
                    'firstName',
                    'lastName',
                    'email',
                    'emailVerified'
                  ]
                },
                examples: {
                  'Updated User Rebecca Baker': {
                    value: {
                      id: 13,
                      firstName: 'Rebecca',
                      lastName: 'Baker',
                      email: 'rebecca@gmail.com',
                      dateOfBirth: '1985-10-02',
                      emailVerified: false,
                      createDate: '2019-08-24'
                    }
                  }
                }
              }
            }
          },
          '404': {
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'User Not Found',
                  text: 'User Not Found',
                  tokens: [
                    { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          '409': {
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Email Already Taken',
                  text: 'Email Already Taken',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Email Already Taken',
                      text: 'Email Already Taken'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        },
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Update the information of an existing user.',
              text: 'Update the information of an existing user.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Update the information of an existing user.',
                  text: 'Update the information of an existing user.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        },
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  firstName: { type: 'string' },
                  lastName: { type: 'string' },
                  email: {
                    type: 'string',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                          text: \\"If a new email is given, the user's email verified property will be set to false.\\",
                          tokens: [
                            {
                              type: 'text',
                              raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                              text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  },
                  dateOfBirth: { type: 'string' }
                }
              },
              examples: {
                'Update First Name': { value: { firstName: 'Rebecca' } },
                'Update Email': { value: { email: 'rebecca@gmail.com' } },
                'Update Last Name & Date of Birth': {
                  value: { lastName: 'Baker', dateOfBirth: '1985-10-02' }
                }
              }
            }
          },
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Patch user properties to update.',
                text: 'Patch user properties to update.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Patch user properties to update.',
                    text: 'Patch user properties to update.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      }
    },
    Symbol(paths/%2Fusers%2F%7BuserId%7D) => {
      path: [ 'paths', '/users/{userId}' ],
      value: {
        parameters: [
          {
            schema: { type: 'integer' },
            name: 'userId',
            in: 'path',
            required: true,
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Id of an existing **user**.',
                  text: 'Id of an existing **user**.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Id of an existing ',
                      text: 'Id of an existing '
                    },
                    {
                      type: 'strong',
                      raw: '**user**',
                      text: 'user',
                      tokens: [ { type: 'text', raw: 'user', text: 'user' } ]
                    },
                    { type: 'text', raw: '.', text: '.' }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        ],
        get: {
          summary: 'Get User Info by User ID',
          tags: [],
          responses: {
            '200': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Found',
                    text: 'User Found',
                    tokens: [ { type: 'text', raw: 'User Found', text: 'User Found' } ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              },
              content: {
                'application/json': {
                  schema: {
                    title: 'User',
                    type: 'object',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [ links: [Object: null prototype] {} ],
                      links: [Object: null prototype] {}
                    },
                    examples: [
                      {
                        id: 142,
                        firstName: 'Alice',
                        lastName: 'Smith',
                        email: 'alice.smith@gmail.com',
                        dateOfBirth: '1997-10-31',
                        emailVerified: true,
                        signUpDate: '2019-08-24'
                      }
                    ],
                    properties: {
                      id: {
                        type: 'integer',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'Unique identifier for the given user.',
                              text: 'Unique identifier for the given user.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'Unique identifier for the given user.',
                                  text: 'Unique identifier for the given user.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      firstName: { type: 'string' },
                      lastName: { type: 'string' },
                      email: { type: 'string', format: 'email' },
                      dateOfBirth: {
                        type: 'string',
                        format: 'date',
                        example: '1997-10-31'
                      },
                      emailVerified: {
                        type: 'boolean',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: \\"Set to true if the user's email has been verified.\\",
                              text: \\"Set to true if the user's email has been verified.\\",
                              tokens: [
                                {
                                  type: 'text',
                                  raw: \\"Set to true if the user's email has been verified.\\",
                                  text: 'Set to true if the user&#39;s email has been verified.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      createDate: {
                        type: 'string',
                        format: 'date',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'The date that the user was created.',
                              text: 'The date that the user was created.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'The date that the user was created.',
                                  text: 'The date that the user was created.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      }
                    },
                    required: [
                      'id',
                      'firstName',
                      'lastName',
                      'email',
                      'emailVerified'
                    ]
                  },
                  examples: {
                    'Get User Alice Smith': {
                      value: {
                        id: 142,
                        firstName: 'Alice',
                        lastName: 'Smith',
                        email: 'alice.smith@gmail.com',
                        dateOfBirth: '1997-10-31',
                        emailVerified: true,
                        signUpDate: '2019-08-24'
                      }
                    }
                  }
                }
              }
            },
            '404': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Not Found',
                    text: 'User Not Found',
                    tokens: [
                      { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          operationId: 'get-users-userId',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Retrieve the information of the user with the matching user ID.',
                text: 'Retrieve the information of the user with the matching user ID.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Retrieve the information of the user with the matching user ID.',
                    text: 'Retrieve the information of the user with the matching user ID.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        patch: {
          summary: 'Update User Information',
          operationId: 'patch-users-userId',
          responses: {
            '200': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Updated',
                    text: 'User Updated',
                    tokens: [ { type: 'text', raw: 'User Updated', text: 'User Updated' } ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              },
              content: {
                'application/json': {
                  schema: {
                    title: 'User',
                    type: 'object',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [ links: [Object: null prototype] {} ],
                      links: [Object: null prototype] {}
                    },
                    examples: [
                      {
                        id: 142,
                        firstName: 'Alice',
                        lastName: 'Smith',
                        email: 'alice.smith@gmail.com',
                        dateOfBirth: '1997-10-31',
                        emailVerified: true,
                        signUpDate: '2019-08-24'
                      }
                    ],
                    properties: {
                      id: {
                        type: 'integer',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'Unique identifier for the given user.',
                              text: 'Unique identifier for the given user.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'Unique identifier for the given user.',
                                  text: 'Unique identifier for the given user.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      firstName: { type: 'string' },
                      lastName: { type: 'string' },
                      email: { type: 'string', format: 'email' },
                      dateOfBirth: {
                        type: 'string',
                        format: 'date',
                        example: '1997-10-31'
                      },
                      emailVerified: {
                        type: 'boolean',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: \\"Set to true if the user's email has been verified.\\",
                              text: \\"Set to true if the user's email has been verified.\\",
                              tokens: [
                                {
                                  type: 'text',
                                  raw: \\"Set to true if the user's email has been verified.\\",
                                  text: 'Set to true if the user&#39;s email has been verified.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      createDate: {
                        type: 'string',
                        format: 'date',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'The date that the user was created.',
                              text: 'The date that the user was created.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'The date that the user was created.',
                                  text: 'The date that the user was created.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      }
                    },
                    required: [
                      'id',
                      'firstName',
                      'lastName',
                      'email',
                      'emailVerified'
                    ]
                  },
                  examples: {
                    'Updated User Rebecca Baker': {
                      value: {
                        id: 13,
                        firstName: 'Rebecca',
                        lastName: 'Baker',
                        email: 'rebecca@gmail.com',
                        dateOfBirth: '1985-10-02',
                        emailVerified: false,
                        createDate: '2019-08-24'
                      }
                    }
                  }
                }
              }
            },
            '404': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Not Found',
                    text: 'User Not Found',
                    tokens: [
                      { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            '409': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Email Already Taken',
                    text: 'Email Already Taken',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Email Already Taken',
                        text: 'Email Already Taken'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Update the information of an existing user.',
                text: 'Update the information of an existing user.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Update the information of an existing user.',
                    text: 'Update the information of an existing user.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          },
          requestBody: {
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    firstName: { type: 'string' },
                    lastName: { type: 'string' },
                    email: {
                      type: 'string',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                            text: \\"If a new email is given, the user's email verified property will be set to false.\\",
                            tokens: [
                              {
                                type: 'text',
                                raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                                text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    },
                    dateOfBirth: { type: 'string' }
                  }
                },
                examples: {
                  'Update First Name': { value: { firstName: 'Rebecca' } },
                  'Update Email': { value: { email: 'rebecca@gmail.com' } },
                  'Update Last Name & Date of Birth': {
                    value: { lastName: 'Baker', dateOfBirth: '1985-10-02' }
                  }
                }
              }
            },
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Patch user properties to update.',
                  text: 'Patch user properties to update.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Patch user properties to update.',
                      text: 'Patch user properties to update.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/summary) => {
      path: [ 'paths', '/user', 'post', 'summary' ],
      value: 'Create New User'
    },
    Symbol(paths/%2Fuser/post/operationId) => {
      path: [ 'paths', '/user', 'post', 'operationId' ],
      value: 'post-user'
    },
    Symbol(paths/%2Fuser/post/responses/200/description) => {
      path: [ 'paths', '/user', 'post', 'responses', '200', 'description' ],
      value: 'User Created'
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/examples/0) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples',
        '0'
      ],
      value: {
        id: 142,
        firstName: 'Alice',
        lastName: 'Smith',
        email: 'alice.smith@gmail.com',
        dateOfBirth: '1997-10-31',
        emailVerified: true,
        signUpDate: '2019-08-24'
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/examples) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'examples'
      ],
      value: [
        {
          id: 142,
          firstName: 'Alice',
          lastName: 'Smith',
          email: 'alice.smith@gmail.com',
          dateOfBirth: '1997-10-31',
          emailVerified: true,
          signUpDate: '2019-08-24'
        }
      ]
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/id) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'id'
      ],
      value: {
        type: 'integer',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Unique identifier for the given user.',
              text: 'Unique identifier for the given user.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Unique identifier for the given user.',
                  text: 'Unique identifier for the given user.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/firstName) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'firstName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/lastName) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'lastName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/email) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'email'
      ],
      value: { type: 'string', format: 'email' }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/dateOfBirth) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'dateOfBirth'
      ],
      value: { type: 'string', format: 'date', example: '1997-10-31' }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/emailVerified) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'emailVerified'
      ],
      value: {
        type: 'boolean',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: \\"Set to true if the user's email has been verified.\\",
              text: \\"Set to true if the user's email has been verified.\\",
              tokens: [
                {
                  type: 'text',
                  raw: \\"Set to true if the user's email has been verified.\\",
                  text: 'Set to true if the user&#39;s email has been verified.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties/createDate) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'createDate'
      ],
      value: {
        type: 'string',
        format: 'date',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'The date that the user was created.',
              text: 'The date that the user was created.',
              tokens: [
                {
                  type: 'text',
                  raw: 'The date that the user was created.',
                  text: 'The date that the user was created.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/properties) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties'
      ],
      value: {
        id: {
          type: 'integer',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Unique identifier for the given user.',
                text: 'Unique identifier for the given user.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Unique identifier for the given user.',
                    text: 'Unique identifier for the given user.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        firstName: { type: 'string' },
        lastName: { type: 'string' },
        email: { type: 'string', format: 'email' },
        dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
        emailVerified: {
          type: 'boolean',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: \\"Set to true if the user's email has been verified.\\",
                text: \\"Set to true if the user's email has been verified.\\",
                tokens: [
                  {
                    type: 'text',
                    raw: \\"Set to true if the user's email has been verified.\\",
                    text: 'Set to true if the user&#39;s email has been verified.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        createDate: {
          type: 'string',
          format: 'date',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'The date that the user was created.',
                text: 'The date that the user was created.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'The date that the user was created.',
                    text: 'The date that the user was created.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema/required) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'required'
      ],
      value: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/schema) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema'
      ],
      value: {
        title: 'User',
        type: 'object',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [ links: [Object: null prototype] {} ],
          links: [Object: null prototype] {}
        },
        examples: [
          {
            id: 142,
            firstName: 'Alice',
            lastName: 'Smith',
            email: 'alice.smith@gmail.com',
            dateOfBirth: '1997-10-31',
            emailVerified: true,
            signUpDate: '2019-08-24'
          }
        ],
        properties: {
          id: {
            type: 'integer',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Unique identifier for the given user.',
                  text: 'Unique identifier for the given user.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Unique identifier for the given user.',
                      text: 'Unique identifier for the given user.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          firstName: { type: 'string' },
          lastName: { type: 'string' },
          email: { type: 'string', format: 'email' },
          dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
          emailVerified: {
            type: 'boolean',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: \\"Set to true if the user's email has been verified.\\",
                  text: \\"Set to true if the user's email has been verified.\\",
                  tokens: [
                    {
                      type: 'text',
                      raw: \\"Set to true if the user's email has been verified.\\",
                      text: 'Set to true if the user&#39;s email has been verified.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          createDate: {
            type: 'string',
            format: 'date',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'The date that the user was created.',
                  text: 'The date that the user was created.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'The date that the user was created.',
                      text: 'The date that the user was created.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        },
        required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/id) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'New User Bob Fellow',
        'value',
        'id'
      ],
      value: 12
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/firstName) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'New User Bob Fellow',
        'value',
        'firstName'
      ],
      value: 'Bob'
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/lastName) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'New User Bob Fellow',
        'value',
        'lastName'
      ],
      value: 'Fellow'
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/email) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'New User Bob Fellow',
        'value',
        'email'
      ],
      value: 'bob.fellow@gmail.com'
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/dateOfBirth) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'New User Bob Fellow',
        'value',
        'dateOfBirth'
      ],
      value: '1996-08-24'
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value/createDate) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'New User Bob Fellow',
        'value',
        'createDate'
      ],
      value: '2020-11-18'
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow/value) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'New User Bob Fellow',
        'value'
      ],
      value: {
        id: 12,
        firstName: 'Bob',
        lastName: 'Fellow',
        email: 'bob.fellow@gmail.com',
        dateOfBirth: '1996-08-24',
        emailVerified: false,
        createDate: '2020-11-18'
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples/New%20User%20Bob%20Fellow) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'examples',
        'New User Bob Fellow'
      ],
      value: {
        value: {
          id: 12,
          firstName: 'Bob',
          lastName: 'Fellow',
          email: 'bob.fellow@gmail.com',
          dateOfBirth: '1996-08-24',
          emailVerified: false,
          createDate: '2020-11-18'
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson/examples) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'examples'
      ],
      value: {
        'New User Bob Fellow': {
          value: {
            id: 12,
            firstName: 'Bob',
            lastName: 'Fellow',
            email: 'bob.fellow@gmail.com',
            dateOfBirth: '1996-08-24',
            emailVerified: false,
            createDate: '2020-11-18'
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content/application%2Fjson) => {
      path: [
        'paths',
        '/user',
        'post',
        'responses',
        '200',
        'content',
        'application/json'
      ],
      value: {
        schema: {
          title: 'User',
          type: 'object',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [ links: [Object: null prototype] {} ],
            links: [Object: null prototype] {}
          },
          examples: [
            {
              id: 142,
              firstName: 'Alice',
              lastName: 'Smith',
              email: 'alice.smith@gmail.com',
              dateOfBirth: '1997-10-31',
              emailVerified: true,
              signUpDate: '2019-08-24'
            }
          ],
          properties: {
            id: {
              type: 'integer',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Unique identifier for the given user.',
                    text: 'Unique identifier for the given user.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Unique identifier for the given user.',
                        text: 'Unique identifier for the given user.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            firstName: { type: 'string' },
            lastName: { type: 'string' },
            email: { type: 'string', format: 'email' },
            dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
            emailVerified: {
              type: 'boolean',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: \\"Set to true if the user's email has been verified.\\",
                    text: \\"Set to true if the user's email has been verified.\\",
                    tokens: [
                      {
                        type: 'text',
                        raw: \\"Set to true if the user's email has been verified.\\",
                        text: 'Set to true if the user&#39;s email has been verified.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            createDate: {
              type: 'string',
              format: 'date',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'The date that the user was created.',
                    text: 'The date that the user was created.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'The date that the user was created.',
                        text: 'The date that the user was created.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
        },
        examples: {
          'New User Bob Fellow': {
            value: {
              id: 12,
              firstName: 'Bob',
              lastName: 'Fellow',
              email: 'bob.fellow@gmail.com',
              dateOfBirth: '1996-08-24',
              emailVerified: false,
              createDate: '2020-11-18'
            }
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/200/content) => {
      path: [ 'paths', '/user', 'post', 'responses', '200', 'content' ],
      value: {
        'application/json': {
          schema: {
            title: 'User',
            type: 'object',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [ links: [Object: null prototype] {} ],
              links: [Object: null prototype] {}
            },
            examples: [
              {
                id: 142,
                firstName: 'Alice',
                lastName: 'Smith',
                email: 'alice.smith@gmail.com',
                dateOfBirth: '1997-10-31',
                emailVerified: true,
                signUpDate: '2019-08-24'
              }
            ],
            properties: {
              id: {
                type: 'integer',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'Unique identifier for the given user.',
                      text: 'Unique identifier for the given user.',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'Unique identifier for the given user.',
                          text: 'Unique identifier for the given user.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              firstName: { type: 'string' },
              lastName: { type: 'string' },
              email: { type: 'string', format: 'email' },
              dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
              emailVerified: {
                type: 'boolean',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: \\"Set to true if the user's email has been verified.\\",
                      text: \\"Set to true if the user's email has been verified.\\",
                      tokens: [
                        {
                          type: 'text',
                          raw: \\"Set to true if the user's email has been verified.\\",
                          text: 'Set to true if the user&#39;s email has been verified.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              createDate: {
                type: 'string',
                format: 'date',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'The date that the user was created.',
                      text: 'The date that the user was created.',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'The date that the user was created.',
                          text: 'The date that the user was created.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              }
            },
            required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
          },
          examples: {
            'New User Bob Fellow': {
              value: {
                id: 12,
                firstName: 'Bob',
                lastName: 'Fellow',
                email: 'bob.fellow@gmail.com',
                dateOfBirth: '1996-08-24',
                emailVerified: false,
                createDate: '2020-11-18'
              }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/200) => {
      path: [ 'paths', '/user', 'post', 'responses', '200' ],
      value: {
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'User Created',
              text: 'User Created',
              tokens: [ { type: 'text', raw: 'User Created', text: 'User Created' } ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        },
        content: {
          'application/json': {
            schema: {
              title: 'User',
              type: 'object',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [ links: [Object: null prototype] {} ],
                links: [Object: null prototype] {}
              },
              examples: [
                {
                  id: 142,
                  firstName: 'Alice',
                  lastName: 'Smith',
                  email: 'alice.smith@gmail.com',
                  dateOfBirth: '1997-10-31',
                  emailVerified: true,
                  signUpDate: '2019-08-24'
                }
              ],
              properties: {
                id: {
                  type: 'integer',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: 'Unique identifier for the given user.',
                        text: 'Unique identifier for the given user.',
                        tokens: [
                          {
                            type: 'text',
                            raw: 'Unique identifier for the given user.',
                            text: 'Unique identifier for the given user.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                },
                firstName: { type: 'string' },
                lastName: { type: 'string' },
                email: { type: 'string', format: 'email' },
                dateOfBirth: {
                  type: 'string',
                  format: 'date',
                  example: '1997-10-31'
                },
                emailVerified: {
                  type: 'boolean',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: \\"Set to true if the user's email has been verified.\\",
                        text: \\"Set to true if the user's email has been verified.\\",
                        tokens: [
                          {
                            type: 'text',
                            raw: \\"Set to true if the user's email has been verified.\\",
                            text: 'Set to true if the user&#39;s email has been verified.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                },
                createDate: {
                  type: 'string',
                  format: 'date',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: 'The date that the user was created.',
                        text: 'The date that the user was created.',
                        tokens: [
                          {
                            type: 'text',
                            raw: 'The date that the user was created.',
                            text: 'The date that the user was created.'
                          }
                        ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                }
              },
              required: [
                'id',
                'firstName',
                'lastName',
                'email',
                'emailVerified'
              ]
            },
            examples: {
              'New User Bob Fellow': {
                value: {
                  id: 12,
                  firstName: 'Bob',
                  lastName: 'Fellow',
                  email: 'bob.fellow@gmail.com',
                  dateOfBirth: '1996-08-24',
                  emailVerified: false,
                  createDate: '2020-11-18'
                }
              }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/400/description) => {
      path: [ 'paths', '/user', 'post', 'responses', '400', 'description' ],
      value: 'Missing Required Information'
    },
    Symbol(paths/%2Fuser/post/responses/400) => {
      path: [ 'paths', '/user', 'post', 'responses', '400' ],
      value: {
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Missing Required Information',
              text: 'Missing Required Information',
              tokens: [
                {
                  type: 'text',
                  raw: 'Missing Required Information',
                  text: 'Missing Required Information'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses/409) => {
      path: [ 'paths', '/user', 'post', 'responses', '409' ],
      value: {
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Email Already Taken',
              text: 'Email Already Taken',
              tokens: [
                {
                  type: 'text',
                  raw: 'Email Already Taken',
                  text: 'Email Already Taken'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fuser/post/responses) => {
      path: [ 'paths', '/user', 'post', 'responses' ],
      value: {
        '200': {
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'User Created',
                text: 'User Created',
                tokens: [ { type: 'text', raw: 'User Created', text: 'User Created' } ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          },
          content: {
            'application/json': {
              schema: {
                title: 'User',
                type: 'object',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [ links: [Object: null prototype] {} ],
                  links: [Object: null prototype] {}
                },
                examples: [
                  {
                    id: 142,
                    firstName: 'Alice',
                    lastName: 'Smith',
                    email: 'alice.smith@gmail.com',
                    dateOfBirth: '1997-10-31',
                    emailVerified: true,
                    signUpDate: '2019-08-24'
                  }
                ],
                properties: {
                  id: {
                    type: 'integer',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: 'Unique identifier for the given user.',
                          text: 'Unique identifier for the given user.',
                          tokens: [
                            {
                              type: 'text',
                              raw: 'Unique identifier for the given user.',
                              text: 'Unique identifier for the given user.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  },
                  firstName: { type: 'string' },
                  lastName: { type: 'string' },
                  email: { type: 'string', format: 'email' },
                  dateOfBirth: {
                    type: 'string',
                    format: 'date',
                    example: '1997-10-31'
                  },
                  emailVerified: {
                    type: 'boolean',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: \\"Set to true if the user's email has been verified.\\",
                          text: \\"Set to true if the user's email has been verified.\\",
                          tokens: [
                            {
                              type: 'text',
                              raw: \\"Set to true if the user's email has been verified.\\",
                              text: 'Set to true if the user&#39;s email has been verified.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  },
                  createDate: {
                    type: 'string',
                    format: 'date',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: 'The date that the user was created.',
                          text: 'The date that the user was created.',
                          tokens: [
                            {
                              type: 'text',
                              raw: 'The date that the user was created.',
                              text: 'The date that the user was created.'
                            }
                          ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  }
                },
                required: [
                  'id',
                  'firstName',
                  'lastName',
                  'email',
                  'emailVerified'
                ]
              },
              examples: {
                'New User Bob Fellow': {
                  value: {
                    id: 12,
                    firstName: 'Bob',
                    lastName: 'Fellow',
                    email: 'bob.fellow@gmail.com',
                    dateOfBirth: '1996-08-24',
                    emailVerified: false,
                    createDate: '2020-11-18'
                  }
                }
              }
            }
          }
        },
        '400': {
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Missing Required Information',
                text: 'Missing Required Information',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Missing Required Information',
                    text: 'Missing Required Information'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        '409': {
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Email Already Taken',
                text: 'Email Already Taken',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Email Already Taken',
                    text: 'Email Already Taken'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties/firstName) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties',
        'firstName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties/lastName) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties',
        'lastName'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties/email) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties',
        'email'
      ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties/dateOfBirth) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties',
        'dateOfBirth'
      ],
      value: { type: 'string', format: 'date' }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/properties) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'properties'
      ],
      value: {
        firstName: { type: 'string' },
        lastName: { type: 'string' },
        email: { type: 'string' },
        dateOfBirth: { type: 'string', format: 'date' }
      }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/required/3) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'required',
        '3'
      ],
      value: 'dateOfBirth'
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema/required) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'schema',
        'required'
      ],
      value: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/schema) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'schema'
      ],
      value: {
        type: 'object',
        properties: {
          firstName: { type: 'string' },
          lastName: { type: 'string' },
          email: { type: 'string' },
          dateOfBirth: { type: 'string', format: 'date' }
        },
        required: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
      }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/examples/Create%20User%20Bob%20Fellow/value) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'examples',
        'Create User Bob Fellow',
        'value'
      ],
      value: {
        firstName: 'Bob',
        lastName: 'Fellow',
        email: 'bob.fellow@gmail.com',
        dateOfBirth: '1996-08-24'
      }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/examples/Create%20User%20Bob%20Fellow) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'examples',
        'Create User Bob Fellow'
      ],
      value: {
        value: {
          firstName: 'Bob',
          lastName: 'Fellow',
          email: 'bob.fellow@gmail.com',
          dateOfBirth: '1996-08-24'
        }
      }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson/examples) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json',
        'examples'
      ],
      value: {
        'Create User Bob Fellow': {
          value: {
            firstName: 'Bob',
            lastName: 'Fellow',
            email: 'bob.fellow@gmail.com',
            dateOfBirth: '1996-08-24'
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/requestBody/content/application%2Fjson) => {
      path: [
        'paths',
        '/user',
        'post',
        'requestBody',
        'content',
        'application/json'
      ],
      value: {
        schema: {
          type: 'object',
          properties: {
            firstName: { type: 'string' },
            lastName: { type: 'string' },
            email: { type: 'string' },
            dateOfBirth: { type: 'string', format: 'date' }
          },
          required: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
        },
        examples: {
          'Create User Bob Fellow': {
            value: {
              firstName: 'Bob',
              lastName: 'Fellow',
              email: 'bob.fellow@gmail.com',
              dateOfBirth: '1996-08-24'
            }
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/requestBody/content) => {
      path: [ 'paths', '/user', 'post', 'requestBody', 'content' ],
      value: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              firstName: { type: 'string' },
              lastName: { type: 'string' },
              email: { type: 'string' },
              dateOfBirth: { type: 'string', format: 'date' }
            },
            required: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
          },
          examples: {
            'Create User Bob Fellow': {
              value: {
                firstName: 'Bob',
                lastName: 'Fellow',
                email: 'bob.fellow@gmail.com',
                dateOfBirth: '1996-08-24'
              }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fuser/post/requestBody/description) => {
      path: [ 'paths', '/user', 'post', 'requestBody', 'description' ],
      value: 'Post the necessary fields for the API to create a new user.'
    },
    Symbol(paths/%2Fuser/post/requestBody) => {
      path: [ 'paths', '/user', 'post', 'requestBody' ],
      value: {
        content: {
          'application/json': {
            schema: {
              type: 'object',
              properties: {
                firstName: { type: 'string' },
                lastName: { type: 'string' },
                email: { type: 'string' },
                dateOfBirth: { type: 'string', format: 'date' }
              },
              required: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
            },
            examples: {
              'Create User Bob Fellow': {
                value: {
                  firstName: 'Bob',
                  lastName: 'Fellow',
                  email: 'bob.fellow@gmail.com',
                  dateOfBirth: '1996-08-24'
                }
              }
            }
          }
        },
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Post the necessary fields for the API to create a new user.',
              text: 'Post the necessary fields for the API to create a new user.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Post the necessary fields for the API to create a new user.',
                  text: 'Post the necessary fields for the API to create a new user.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fuser/post/description) => {
      path: [ 'paths', '/user', 'post', 'description' ],
      value: 'Create a new user.'
    },
    Symbol(paths/%2Fuser/post) => {
      path: [ 'paths', '/user', 'post' ],
      value: {
        summary: 'Create New User',
        operationId: 'post-user',
        responses: {
          '200': {
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'User Created',
                  text: 'User Created',
                  tokens: [ { type: 'text', raw: 'User Created', text: 'User Created' } ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            },
            content: {
              'application/json': {
                schema: {
                  title: 'User',
                  type: 'object',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [ links: [Object: null prototype] {} ],
                    links: [Object: null prototype] {}
                  },
                  examples: [
                    {
                      id: 142,
                      firstName: 'Alice',
                      lastName: 'Smith',
                      email: 'alice.smith@gmail.com',
                      dateOfBirth: '1997-10-31',
                      emailVerified: true,
                      signUpDate: '2019-08-24'
                    }
                  ],
                  properties: {
                    id: {
                      type: 'integer',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: 'Unique identifier for the given user.',
                            text: 'Unique identifier for the given user.',
                            tokens: [
                              {
                                type: 'text',
                                raw: 'Unique identifier for the given user.',
                                text: 'Unique identifier for the given user.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    },
                    firstName: { type: 'string' },
                    lastName: { type: 'string' },
                    email: { type: 'string', format: 'email' },
                    dateOfBirth: {
                      type: 'string',
                      format: 'date',
                      example: '1997-10-31'
                    },
                    emailVerified: {
                      type: 'boolean',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: \\"Set to true if the user's email has been verified.\\",
                            text: \\"Set to true if the user's email has been verified.\\",
                            tokens: [
                              {
                                type: 'text',
                                raw: \\"Set to true if the user's email has been verified.\\",
                                text: 'Set to true if the user&#39;s email has been verified.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    },
                    createDate: {
                      type: 'string',
                      format: 'date',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: 'The date that the user was created.',
                            text: 'The date that the user was created.',
                            tokens: [
                              {
                                type: 'text',
                                raw: 'The date that the user was created.',
                                text: 'The date that the user was created.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    }
                  },
                  required: [
                    'id',
                    'firstName',
                    'lastName',
                    'email',
                    'emailVerified'
                  ]
                },
                examples: {
                  'New User Bob Fellow': {
                    value: {
                      id: 12,
                      firstName: 'Bob',
                      lastName: 'Fellow',
                      email: 'bob.fellow@gmail.com',
                      dateOfBirth: '1996-08-24',
                      emailVerified: false,
                      createDate: '2020-11-18'
                    }
                  }
                }
              }
            }
          },
          '400': {
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Missing Required Information',
                  text: 'Missing Required Information',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Missing Required Information',
                      text: 'Missing Required Information'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          '409': {
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Email Already Taken',
                  text: 'Email Already Taken',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Email Already Taken',
                      text: 'Email Already Taken'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        },
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  firstName: { type: 'string' },
                  lastName: { type: 'string' },
                  email: { type: 'string' },
                  dateOfBirth: { type: 'string', format: 'date' }
                },
                required: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
              },
              examples: {
                'Create User Bob Fellow': {
                  value: {
                    firstName: 'Bob',
                    lastName: 'Fellow',
                    email: 'bob.fellow@gmail.com',
                    dateOfBirth: '1996-08-24'
                  }
                }
              }
            }
          },
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Post the necessary fields for the API to create a new user.',
                text: 'Post the necessary fields for the API to create a new user.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Post the necessary fields for the API to create a new user.',
                    text: 'Post the necessary fields for the API to create a new user.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Create a new user.',
              text: 'Create a new user.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Create a new user.',
                  text: 'Create a new user.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fuser) => {
      path: [ 'paths', '/user' ],
      value: {
        post: {
          summary: 'Create New User',
          operationId: 'post-user',
          responses: {
            '200': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Created',
                    text: 'User Created',
                    tokens: [ { type: 'text', raw: 'User Created', text: 'User Created' } ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              },
              content: {
                'application/json': {
                  schema: {
                    title: 'User',
                    type: 'object',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [ links: [Object: null prototype] {} ],
                      links: [Object: null prototype] {}
                    },
                    examples: [
                      {
                        id: 142,
                        firstName: 'Alice',
                        lastName: 'Smith',
                        email: 'alice.smith@gmail.com',
                        dateOfBirth: '1997-10-31',
                        emailVerified: true,
                        signUpDate: '2019-08-24'
                      }
                    ],
                    properties: {
                      id: {
                        type: 'integer',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'Unique identifier for the given user.',
                              text: 'Unique identifier for the given user.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'Unique identifier for the given user.',
                                  text: 'Unique identifier for the given user.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      firstName: { type: 'string' },
                      lastName: { type: 'string' },
                      email: { type: 'string', format: 'email' },
                      dateOfBirth: {
                        type: 'string',
                        format: 'date',
                        example: '1997-10-31'
                      },
                      emailVerified: {
                        type: 'boolean',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: \\"Set to true if the user's email has been verified.\\",
                              text: \\"Set to true if the user's email has been verified.\\",
                              tokens: [
                                {
                                  type: 'text',
                                  raw: \\"Set to true if the user's email has been verified.\\",
                                  text: 'Set to true if the user&#39;s email has been verified.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      createDate: {
                        type: 'string',
                        format: 'date',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'The date that the user was created.',
                              text: 'The date that the user was created.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'The date that the user was created.',
                                  text: 'The date that the user was created.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      }
                    },
                    required: [
                      'id',
                      'firstName',
                      'lastName',
                      'email',
                      'emailVerified'
                    ]
                  },
                  examples: {
                    'New User Bob Fellow': {
                      value: {
                        id: 12,
                        firstName: 'Bob',
                        lastName: 'Fellow',
                        email: 'bob.fellow@gmail.com',
                        dateOfBirth: '1996-08-24',
                        emailVerified: false,
                        createDate: '2020-11-18'
                      }
                    }
                  }
                }
              }
            },
            '400': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Missing Required Information',
                    text: 'Missing Required Information',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Missing Required Information',
                        text: 'Missing Required Information'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            '409': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Email Already Taken',
                    text: 'Email Already Taken',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Email Already Taken',
                        text: 'Email Already Taken'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          requestBody: {
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    firstName: { type: 'string' },
                    lastName: { type: 'string' },
                    email: { type: 'string' },
                    dateOfBirth: { type: 'string', format: 'date' }
                  },
                  required: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
                },
                examples: {
                  'Create User Bob Fellow': {
                    value: {
                      firstName: 'Bob',
                      lastName: 'Fellow',
                      email: 'bob.fellow@gmail.com',
                      dateOfBirth: '1996-08-24'
                    }
                  }
                }
              }
            },
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Post the necessary fields for the API to create a new user.',
                  text: 'Post the necessary fields for the API to create a new user.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Post the necessary fields for the API to create a new user.',
                      text: 'Post the necessary fields for the API to create a new user.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Create a new user.',
                text: 'Create a new user.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Create a new user.',
                    text: 'Create a new user.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/summary) => {
      path: [ 'paths', '/car/{lk}', 'post', 'summary' ],
      value: 'Create Car'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/operationId) => {
      path: [ 'paths', '/car/{lk}', 'post', 'operationId' ],
      value: 'post-car'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/description) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'description'
      ],
      value: 'Car Section'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/%24schema) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        '$schema'
      ],
      value: 'http://json-schema.org/draft-07/schema'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/title) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'title'
      ],
      value: 'Car'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/roles/type) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'roles',
        'type'
      ],
      value: 'number'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/roles/title) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'roles',
        'title'
      ],
      value: 'roles'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/roles/description) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'roles',
        'description'
      ],
      value: 'Roles number'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/roles) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'roles'
      ],
      value: {
        type: 'number',
        title: 'roles',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Roles number',
              text: 'Roles number',
              tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/color/enum/0) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'color',
        'enum',
        '0'
      ],
      value: 'red'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/color/enum/1) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'color',
        'enum',
        '1'
      ],
      value: 'green'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/color/enum) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'color',
        'enum'
      ],
      value: [ 'red', 'green' ]
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties/color) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties',
        'color'
      ],
      value: { type: 'string', enum: [ 'red', 'green' ] }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema/properties) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema',
        'properties'
      ],
      value: {
        roles: {
          type: 'number',
          title: 'roles',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Roles number',
                text: 'Roles number',
                tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        color: { type: 'string', enum: [ 'red', 'green' ] }
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson/schema) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json',
        'schema'
      ],
      value: {
        '$schema': 'http://json-schema.org/draft-07/schema',
        type: 'object',
        title: 'Car',
        properties: {
          roles: {
            type: 'number',
            title: 'roles',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Roles number',
                  text: 'Roles number',
                  tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          color: { type: 'string', enum: [ 'red', 'green' ] }
        }
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content/application%2Fjson) => {
      path: [
        'paths',
        '/car/{lk}',
        'post',
        'responses',
        '200',
        'content',
        'application/json'
      ],
      value: {
        schema: {
          '$schema': 'http://json-schema.org/draft-07/schema',
          type: 'object',
          title: 'Car',
          properties: {
            roles: {
              type: 'number',
              title: 'roles',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Roles number',
                    text: 'Roles number',
                    tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            color: { type: 'string', enum: [ 'red', 'green' ] }
          }
        }
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200/content) => {
      path: [ 'paths', '/car/{lk}', 'post', 'responses', '200', 'content' ],
      value: {
        'application/json': {
          schema: {
            '$schema': 'http://json-schema.org/draft-07/schema',
            type: 'object',
            title: 'Car',
            properties: {
              roles: {
                type: 'number',
                title: 'roles',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'Roles number',
                      text: 'Roles number',
                      tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              color: { type: 'string', enum: [ 'red', 'green' ] }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses/200) => {
      path: [ 'paths', '/car/{lk}', 'post', 'responses', '200' ],
      value: {
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Car Section',
              text: 'Car Section',
              tokens: [ { type: 'text', raw: 'Car Section', text: 'Car Section' } ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        },
        content: {
          'application/json': {
            schema: {
              '$schema': 'http://json-schema.org/draft-07/schema',
              type: 'object',
              title: 'Car',
              properties: {
                roles: {
                  type: 'number',
                  title: 'roles',
                  description: Documentation {
                    keyToc: '$.1',
                    uri: '../../demo/reference/hola2.yaml',
                    contentType: 'application/json',
                    charset: 'utf-8',
                    bytes: 3000,
                    tokens: [
                      {
                        type: 'paragraph',
                        raw: 'Roles number',
                        text: 'Roles number',
                        tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
                      },
                      links: [Object: null prototype] {}
                    ],
                    links: [Object: null prototype] {}
                  }
                },
                color: { type: 'string', enum: [ 'red', 'green' ] }
              }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/responses) => {
      path: [ 'paths', '/car/{lk}', 'post', 'responses' ],
      value: {
        '200': {
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Car Section',
                text: 'Car Section',
                tokens: [ { type: 'text', raw: 'Car Section', text: 'Car Section' } ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          },
          content: {
            'application/json': {
              schema: {
                '$schema': 'http://json-schema.org/draft-07/schema',
                type: 'object',
                title: 'Car',
                properties: {
                  roles: {
                    type: 'number',
                    title: 'roles',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [
                        {
                          type: 'paragraph',
                          raw: 'Roles number',
                          text: 'Roles number',
                          tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
                        },
                        links: [Object: null prototype] {}
                      ],
                      links: [Object: null prototype] {}
                    }
                  },
                  color: { type: 'string', enum: [ 'red', 'green' ] }
                }
              }
            }
          }
        }
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post/description) => {
      path: [ 'paths', '/car/{lk}', 'post', 'description' ],
      value: 'hjklhkj'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/post) => {
      path: [ 'paths', '/car/{lk}', 'post' ],
      value: {
        summary: 'Create Car',
        operationId: 'post-car',
        responses: {
          '200': {
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Car Section',
                  text: 'Car Section',
                  tokens: [ { type: 'text', raw: 'Car Section', text: 'Car Section' } ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            },
            content: {
              'application/json': {
                schema: {
                  '$schema': 'http://json-schema.org/draft-07/schema',
                  type: 'object',
                  title: 'Car',
                  properties: {
                    roles: {
                      type: 'number',
                      title: 'roles',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: 'Roles number',
                            text: 'Roles number',
                            tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    },
                    color: { type: 'string', enum: [ 'red', 'green' ] }
                  }
                }
              }
            }
          }
        },
        'x-internal': true,
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'hjklhkj',
              text: 'hjklhkj',
              tokens: [ { type: 'text', raw: 'hjklhkj', text: 'hjklhkj' } ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        },
        deprecated: true
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/parameters/0/schema) => {
      path: [ 'paths', '/car/{lk}', 'parameters', '0', 'schema' ],
      value: { type: 'string' }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/parameters/0/name) => {
      path: [ 'paths', '/car/{lk}', 'parameters', '0', 'name' ],
      value: 'lk'
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/parameters/0) => {
      path: [ 'paths', '/car/{lk}', 'parameters', '0' ],
      value: {
        schema: { type: 'string' },
        name: 'lk',
        in: 'path',
        required: true
      }
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D/parameters) => {
      path: [ 'paths', '/car/{lk}', 'parameters' ],
      value: [
        {
          schema: { type: 'string' },
          name: 'lk',
          in: 'path',
          required: true
        }
      ]
    },
    Symbol(paths/%2Fcar%2F%7Blk%7D) => {
      path: [ 'paths', '/car/{lk}' ],
      value: {
        post: {
          summary: 'Create Car',
          operationId: 'post-car',
          responses: {
            '200': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Car Section',
                    text: 'Car Section',
                    tokens: [ { type: 'text', raw: 'Car Section', text: 'Car Section' } ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              },
              content: {
                'application/json': {
                  schema: {
                    '$schema': 'http://json-schema.org/draft-07/schema',
                    type: 'object',
                    title: 'Car',
                    properties: {
                      roles: {
                        type: 'number',
                        title: 'roles',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'Roles number',
                              text: 'Roles number',
                              tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      color: { type: 'string', enum: [ 'red', 'green' ] }
                    }
                  }
                }
              }
            }
          },
          'x-internal': true,
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'hjklhkj',
                text: 'hjklhkj',
                tokens: [ { type: 'text', raw: 'hjklhkj', text: 'hjklhkj' } ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          },
          deprecated: true
        },
        parameters: [
          {
            schema: { type: 'string' },
            name: 'lk',
            in: 'path',
            required: true
          }
        ]
      }
    },
    Symbol(paths) => {
      path: [ 'paths' ],
      value: {
        '/users/{userId}': {
          parameters: [
            {
              schema: { type: 'integer' },
              name: 'userId',
              in: 'path',
              required: true,
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Id of an existing **user**.',
                    text: 'Id of an existing **user**.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Id of an existing ',
                        text: 'Id of an existing '
                      },
                      {
                        type: 'strong',
                        raw: '**user**',
                        text: 'user',
                        tokens: [ { type: 'text', raw: 'user', text: 'user' } ]
                      },
                      { type: 'text', raw: '.', text: '.' }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          ],
          get: {
            summary: 'Get User Info by User ID',
            tags: [],
            responses: {
              '200': {
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'User Found',
                      text: 'User Found',
                      tokens: [ { type: 'text', raw: 'User Found', text: 'User Found' } ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                },
                content: {
                  'application/json': {
                    schema: {
                      title: 'User',
                      type: 'object',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [ links: [Object: null prototype] {} ],
                        links: [Object: null prototype] {}
                      },
                      examples: [
                        {
                          id: 142,
                          firstName: 'Alice',
                          lastName: 'Smith',
                          email: 'alice.smith@gmail.com',
                          dateOfBirth: '1997-10-31',
                          emailVerified: true,
                          signUpDate: '2019-08-24'
                        }
                      ],
                      properties: {
                        id: {
                          type: 'integer',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: 'Unique identifier for the given user.',
                                text: 'Unique identifier for the given user.',
                                tokens: [
                                  {
                                    type: 'text',
                                    raw: 'Unique identifier for the given user.',
                                    text: 'Unique identifier for the given user.'
                                  }
                                ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        },
                        firstName: { type: 'string' },
                        lastName: { type: 'string' },
                        email: { type: 'string', format: 'email' },
                        dateOfBirth: {
                          type: 'string',
                          format: 'date',
                          example: '1997-10-31'
                        },
                        emailVerified: {
                          type: 'boolean',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: \\"Set to true if the user's email has been verified.\\",
                                text: \\"Set to true if the user's email has been verified.\\",
                                tokens: [
                                  {
                                    type: 'text',
                                    raw: \\"Set to true if the user's email has been verified.\\",
                                    text: 'Set to true if the user&#39;s email has been verified.'
                                  }
                                ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        },
                        createDate: {
                          type: 'string',
                          format: 'date',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: 'The date that the user was created.',
                                text: 'The date that the user was created.',
                                tokens: [
                                  {
                                    type: 'text',
                                    raw: 'The date that the user was created.',
                                    text: 'The date that the user was created.'
                                  }
                                ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        }
                      },
                      required: [
                        'id',
                        'firstName',
                        'lastName',
                        'email',
                        'emailVerified'
                      ]
                    },
                    examples: {
                      'Get User Alice Smith': {
                        value: {
                          id: 142,
                          firstName: 'Alice',
                          lastName: 'Smith',
                          email: 'alice.smith@gmail.com',
                          dateOfBirth: '1997-10-31',
                          emailVerified: true,
                          signUpDate: '2019-08-24'
                        }
                      }
                    }
                  }
                }
              },
              '404': {
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'User Not Found',
                      text: 'User Not Found',
                      tokens: [
                        { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              }
            },
            operationId: 'get-users-userId',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Retrieve the information of the user with the matching user ID.',
                  text: 'Retrieve the information of the user with the matching user ID.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Retrieve the information of the user with the matching user ID.',
                      text: 'Retrieve the information of the user with the matching user ID.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          patch: {
            summary: 'Update User Information',
            operationId: 'patch-users-userId',
            responses: {
              '200': {
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'User Updated',
                      text: 'User Updated',
                      tokens: [ { type: 'text', raw: 'User Updated', text: 'User Updated' } ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                },
                content: {
                  'application/json': {
                    schema: {
                      title: 'User',
                      type: 'object',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [ links: [Object: null prototype] {} ],
                        links: [Object: null prototype] {}
                      },
                      examples: [
                        {
                          id: 142,
                          firstName: 'Alice',
                          lastName: 'Smith',
                          email: 'alice.smith@gmail.com',
                          dateOfBirth: '1997-10-31',
                          emailVerified: true,
                          signUpDate: '2019-08-24'
                        }
                      ],
                      properties: {
                        id: {
                          type: 'integer',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: 'Unique identifier for the given user.',
                                text: 'Unique identifier for the given user.',
                                tokens: [
                                  {
                                    type: 'text',
                                    raw: 'Unique identifier for the given user.',
                                    text: 'Unique identifier for the given user.'
                                  }
                                ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        },
                        firstName: { type: 'string' },
                        lastName: { type: 'string' },
                        email: { type: 'string', format: 'email' },
                        dateOfBirth: {
                          type: 'string',
                          format: 'date',
                          example: '1997-10-31'
                        },
                        emailVerified: {
                          type: 'boolean',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: \\"Set to true if the user's email has been verified.\\",
                                text: \\"Set to true if the user's email has been verified.\\",
                                tokens: [
                                  {
                                    type: 'text',
                                    raw: \\"Set to true if the user's email has been verified.\\",
                                    text: 'Set to true if the user&#39;s email has been verified.'
                                  }
                                ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        },
                        createDate: {
                          type: 'string',
                          format: 'date',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: 'The date that the user was created.',
                                text: 'The date that the user was created.',
                                tokens: [
                                  {
                                    type: 'text',
                                    raw: 'The date that the user was created.',
                                    text: 'The date that the user was created.'
                                  }
                                ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        }
                      },
                      required: [
                        'id',
                        'firstName',
                        'lastName',
                        'email',
                        'emailVerified'
                      ]
                    },
                    examples: {
                      'Updated User Rebecca Baker': {
                        value: {
                          id: 13,
                          firstName: 'Rebecca',
                          lastName: 'Baker',
                          email: 'rebecca@gmail.com',
                          dateOfBirth: '1985-10-02',
                          emailVerified: false,
                          createDate: '2019-08-24'
                        }
                      }
                    }
                  }
                }
              },
              '404': {
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'User Not Found',
                      text: 'User Not Found',
                      tokens: [
                        { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              '409': {
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'Email Already Taken',
                      text: 'Email Already Taken',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'Email Already Taken',
                          text: 'Email Already Taken'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              }
            },
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Update the information of an existing user.',
                  text: 'Update the information of an existing user.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Update the information of an existing user.',
                      text: 'Update the information of an existing user.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            },
            requestBody: {
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      firstName: { type: 'string' },
                      lastName: { type: 'string' },
                      email: {
                        type: 'string',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                              text: \\"If a new email is given, the user's email verified property will be set to false.\\",
                              tokens: [
                                {
                                  type: 'text',
                                  raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                                  text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      dateOfBirth: { type: 'string' }
                    }
                  },
                  examples: {
                    'Update First Name': { value: { firstName: 'Rebecca' } },
                    'Update Email': { value: { email: 'rebecca@gmail.com' } },
                    'Update Last Name & Date of Birth': {
                      value: { lastName: 'Baker', dateOfBirth: '1985-10-02' }
                    }
                  }
                }
              },
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Patch user properties to update.',
                    text: 'Patch user properties to update.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Patch user properties to update.',
                        text: 'Patch user properties to update.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          }
        },
        '/user': {
          post: {
            summary: 'Create New User',
            operationId: 'post-user',
            responses: {
              '200': {
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'User Created',
                      text: 'User Created',
                      tokens: [ { type: 'text', raw: 'User Created', text: 'User Created' } ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                },
                content: {
                  'application/json': {
                    schema: {
                      title: 'User',
                      type: 'object',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [ links: [Object: null prototype] {} ],
                        links: [Object: null prototype] {}
                      },
                      examples: [
                        {
                          id: 142,
                          firstName: 'Alice',
                          lastName: 'Smith',
                          email: 'alice.smith@gmail.com',
                          dateOfBirth: '1997-10-31',
                          emailVerified: true,
                          signUpDate: '2019-08-24'
                        }
                      ],
                      properties: {
                        id: {
                          type: 'integer',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: 'Unique identifier for the given user.',
                                text: 'Unique identifier for the given user.',
                                tokens: [
                                  {
                                    type: 'text',
                                    raw: 'Unique identifier for the given user.',
                                    text: 'Unique identifier for the given user.'
                                  }
                                ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        },
                        firstName: { type: 'string' },
                        lastName: { type: 'string' },
                        email: { type: 'string', format: 'email' },
                        dateOfBirth: {
                          type: 'string',
                          format: 'date',
                          example: '1997-10-31'
                        },
                        emailVerified: {
                          type: 'boolean',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: \\"Set to true if the user's email has been verified.\\",
                                text: \\"Set to true if the user's email has been verified.\\",
                                tokens: [
                                  {
                                    type: 'text',
                                    raw: \\"Set to true if the user's email has been verified.\\",
                                    text: 'Set to true if the user&#39;s email has been verified.'
                                  }
                                ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        },
                        createDate: {
                          type: 'string',
                          format: 'date',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: 'The date that the user was created.',
                                text: 'The date that the user was created.',
                                tokens: [
                                  {
                                    type: 'text',
                                    raw: 'The date that the user was created.',
                                    text: 'The date that the user was created.'
                                  }
                                ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        }
                      },
                      required: [
                        'id',
                        'firstName',
                        'lastName',
                        'email',
                        'emailVerified'
                      ]
                    },
                    examples: {
                      'New User Bob Fellow': {
                        value: {
                          id: 12,
                          firstName: 'Bob',
                          lastName: 'Fellow',
                          email: 'bob.fellow@gmail.com',
                          dateOfBirth: '1996-08-24',
                          emailVerified: false,
                          createDate: '2020-11-18'
                        }
                      }
                    }
                  }
                }
              },
              '400': {
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'Missing Required Information',
                      text: 'Missing Required Information',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'Missing Required Information',
                          text: 'Missing Required Information'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              '409': {
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'Email Already Taken',
                      text: 'Email Already Taken',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'Email Already Taken',
                          text: 'Email Already Taken'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              }
            },
            requestBody: {
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      firstName: { type: 'string' },
                      lastName: { type: 'string' },
                      email: { type: 'string' },
                      dateOfBirth: { type: 'string', format: 'date' }
                    },
                    required: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
                  },
                  examples: {
                    'Create User Bob Fellow': {
                      value: {
                        firstName: 'Bob',
                        lastName: 'Fellow',
                        email: 'bob.fellow@gmail.com',
                        dateOfBirth: '1996-08-24'
                      }
                    }
                  }
                }
              },
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Post the necessary fields for the API to create a new user.',
                    text: 'Post the necessary fields for the API to create a new user.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Post the necessary fields for the API to create a new user.',
                        text: 'Post the necessary fields for the API to create a new user.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Create a new user.',
                  text: 'Create a new user.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Create a new user.',
                      text: 'Create a new user.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        },
        '/car/{lk}': {
          post: {
            summary: 'Create Car',
            operationId: 'post-car',
            responses: {
              '200': {
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'Car Section',
                      text: 'Car Section',
                      tokens: [ { type: 'text', raw: 'Car Section', text: 'Car Section' } ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                },
                content: {
                  'application/json': {
                    schema: {
                      '$schema': 'http://json-schema.org/draft-07/schema',
                      type: 'object',
                      title: 'Car',
                      properties: {
                        roles: {
                          type: 'number',
                          title: 'roles',
                          description: Documentation {
                            keyToc: '$.1',
                            uri: '../../demo/reference/hola2.yaml',
                            contentType: 'application/json',
                            charset: 'utf-8',
                            bytes: 3000,
                            tokens: [
                              {
                                type: 'paragraph',
                                raw: 'Roles number',
                                text: 'Roles number',
                                tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
                              },
                              links: [Object: null prototype] {}
                            ],
                            links: [Object: null prototype] {}
                          }
                        },
                        color: { type: 'string', enum: [ 'red', 'green' ] }
                      }
                    }
                  }
                }
              }
            },
            'x-internal': true,
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'hjklhkj',
                  text: 'hjklhkj',
                  tokens: [ { type: 'text', raw: 'hjklhkj', text: 'hjklhkj' } ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            },
            deprecated: true
          },
          parameters: [
            {
              schema: { type: 'string' },
              name: 'lk',
              in: 'path',
              required: true
            }
          ]
        }
      }
    },
    Symbol(components/schemas/User/examples/0) => {
      path: [ 'components', 'schemas', 'User', 'examples', '0' ],
      value: {
        id: 142,
        firstName: 'Alice',
        lastName: 'Smith',
        email: 'alice.smith@gmail.com',
        dateOfBirth: '1997-10-31',
        emailVerified: true,
        signUpDate: '2019-08-24'
      }
    },
    Symbol(components/schemas/User/examples) => {
      path: [ 'components', 'schemas', 'User', 'examples' ],
      value: [
        {
          id: 142,
          firstName: 'Alice',
          lastName: 'Smith',
          email: 'alice.smith@gmail.com',
          dateOfBirth: '1997-10-31',
          emailVerified: true,
          signUpDate: '2019-08-24'
        }
      ]
    },
    Symbol(components/schemas/User/properties/id) => {
      path: [ 'components', 'schemas', 'User', 'properties', 'id' ],
      value: {
        type: 'integer',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'Unique identifier for the given user.',
              text: 'Unique identifier for the given user.',
              tokens: [
                {
                  type: 'text',
                  raw: 'Unique identifier for the given user.',
                  text: 'Unique identifier for the given user.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(components/schemas/User/properties/firstName) => {
      path: [ 'components', 'schemas', 'User', 'properties', 'firstName' ],
      value: { type: 'string' }
    },
    Symbol(components/schemas/User/properties/lastName) => {
      path: [ 'components', 'schemas', 'User', 'properties', 'lastName' ],
      value: { type: 'string' }
    },
    Symbol(components/schemas/User/properties/email) => {
      path: [ 'components', 'schemas', 'User', 'properties', 'email' ],
      value: { type: 'string', format: 'email' }
    },
    Symbol(components/schemas/User/properties/dateOfBirth) => {
      path: [ 'components', 'schemas', 'User', 'properties', 'dateOfBirth' ],
      value: { type: 'string', format: 'date', example: '1997-10-31' }
    },
    Symbol(components/schemas/User/properties/emailVerified) => {
      path: [
        'components',
        'schemas',
        'User',
        'properties',
        'emailVerified'
      ],
      value: {
        type: 'boolean',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: \\"Set to true if the user's email has been verified.\\",
              text: \\"Set to true if the user's email has been verified.\\",
              tokens: [
                {
                  type: 'text',
                  raw: \\"Set to true if the user's email has been verified.\\",
                  text: 'Set to true if the user&#39;s email has been verified.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(components/schemas/User/properties/createDate) => {
      path: [ 'components', 'schemas', 'User', 'properties', 'createDate' ],
      value: {
        type: 'string',
        format: 'date',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [
            {
              type: 'paragraph',
              raw: 'The date that the user was created.',
              text: 'The date that the user was created.',
              tokens: [
                {
                  type: 'text',
                  raw: 'The date that the user was created.',
                  text: 'The date that the user was created.'
                }
              ]
            },
            links: [Object: null prototype] {}
          ],
          links: [Object: null prototype] {}
        }
      }
    },
    Symbol(components/schemas/User/properties) => {
      path: [ 'components', 'schemas', 'User', 'properties' ],
      value: {
        id: {
          type: 'integer',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Unique identifier for the given user.',
                text: 'Unique identifier for the given user.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Unique identifier for the given user.',
                    text: 'Unique identifier for the given user.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        firstName: { type: 'string' },
        lastName: { type: 'string' },
        email: { type: 'string', format: 'email' },
        dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
        emailVerified: {
          type: 'boolean',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: \\"Set to true if the user's email has been verified.\\",
                text: \\"Set to true if the user's email has been verified.\\",
                tokens: [
                  {
                    type: 'text',
                    raw: \\"Set to true if the user's email has been verified.\\",
                    text: 'Set to true if the user&#39;s email has been verified.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        createDate: {
          type: 'string',
          format: 'date',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'The date that the user was created.',
                text: 'The date that the user was created.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'The date that the user was created.',
                    text: 'The date that the user was created.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      }
    },
    Symbol(components/schemas/User/required) => {
      path: [ 'components', 'schemas', 'User', 'required' ],
      value: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
    },
    Symbol(components/schemas/User) => {
      path: [ 'components', 'schemas', 'User' ],
      value: {
        title: 'User',
        type: 'object',
        description: Documentation {
          keyToc: '$.1',
          uri: '../../demo/reference/hola2.yaml',
          contentType: 'application/json',
          charset: 'utf-8',
          bytes: 3000,
          tokens: [ links: [Object: null prototype] {} ],
          links: [Object: null prototype] {}
        },
        examples: [
          {
            id: 142,
            firstName: 'Alice',
            lastName: 'Smith',
            email: 'alice.smith@gmail.com',
            dateOfBirth: '1997-10-31',
            emailVerified: true,
            signUpDate: '2019-08-24'
          }
        ],
        properties: {
          id: {
            type: 'integer',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Unique identifier for the given user.',
                  text: 'Unique identifier for the given user.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Unique identifier for the given user.',
                      text: 'Unique identifier for the given user.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          firstName: { type: 'string' },
          lastName: { type: 'string' },
          email: { type: 'string', format: 'email' },
          dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
          emailVerified: {
            type: 'boolean',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: \\"Set to true if the user's email has been verified.\\",
                  text: \\"Set to true if the user's email has been verified.\\",
                  tokens: [
                    {
                      type: 'text',
                      raw: \\"Set to true if the user's email has been verified.\\",
                      text: 'Set to true if the user&#39;s email has been verified.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          createDate: {
            type: 'string',
            format: 'date',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'The date that the user was created.',
                  text: 'The date that the user was created.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'The date that the user was created.',
                      text: 'The date that the user was created.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        },
        required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
      }
    },
    Symbol(components/schemas) => {
      path: [ 'components', 'schemas' ],
      value: {
        User: {
          title: 'User',
          type: 'object',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [ links: [Object: null prototype] {} ],
            links: [Object: null prototype] {}
          },
          examples: [
            {
              id: 142,
              firstName: 'Alice',
              lastName: 'Smith',
              email: 'alice.smith@gmail.com',
              dateOfBirth: '1997-10-31',
              emailVerified: true,
              signUpDate: '2019-08-24'
            }
          ],
          properties: {
            id: {
              type: 'integer',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Unique identifier for the given user.',
                    text: 'Unique identifier for the given user.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Unique identifier for the given user.',
                        text: 'Unique identifier for the given user.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            firstName: { type: 'string' },
            lastName: { type: 'string' },
            email: { type: 'string', format: 'email' },
            dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
            emailVerified: {
              type: 'boolean',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: \\"Set to true if the user's email has been verified.\\",
                    text: \\"Set to true if the user's email has been verified.\\",
                    tokens: [
                      {
                        type: 'text',
                        raw: \\"Set to true if the user's email has been verified.\\",
                        text: 'Set to true if the user&#39;s email has been verified.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            createDate: {
              type: 'string',
              format: 'date',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'The date that the user was created.',
                    text: 'The date that the user was created.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'The date that the user was created.',
                        text: 'The date that the user was created.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
        }
      }
    },
    Symbol(components) => {
      path: [ 'components' ],
      value: {
        schemas: {
          User: {
            title: 'User',
            type: 'object',
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [ links: [Object: null prototype] {} ],
              links: [Object: null prototype] {}
            },
            examples: [
              {
                id: 142,
                firstName: 'Alice',
                lastName: 'Smith',
                email: 'alice.smith@gmail.com',
                dateOfBirth: '1997-10-31',
                emailVerified: true,
                signUpDate: '2019-08-24'
              }
            ],
            properties: {
              id: {
                type: 'integer',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'Unique identifier for the given user.',
                      text: 'Unique identifier for the given user.',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'Unique identifier for the given user.',
                          text: 'Unique identifier for the given user.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              firstName: { type: 'string' },
              lastName: { type: 'string' },
              email: { type: 'string', format: 'email' },
              dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
              emailVerified: {
                type: 'boolean',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: \\"Set to true if the user's email has been verified.\\",
                      text: \\"Set to true if the user's email has been verified.\\",
                      tokens: [
                        {
                          type: 'text',
                          raw: \\"Set to true if the user's email has been verified.\\",
                          text: 'Set to true if the user&#39;s email has been verified.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              },
              createDate: {
                type: 'string',
                format: 'date',
                description: Documentation {
                  keyToc: '$.1',
                  uri: '../../demo/reference/hola2.yaml',
                  contentType: 'application/json',
                  charset: 'utf-8',
                  bytes: 3000,
                  tokens: [
                    {
                      type: 'paragraph',
                      raw: 'The date that the user was created.',
                      text: 'The date that the user was created.',
                      tokens: [
                        {
                          type: 'text',
                          raw: 'The date that the user was created.',
                          text: 'The date that the user was created.'
                        }
                      ]
                    },
                    links: [Object: null prototype] {}
                  ],
                  links: [Object: null prototype] {}
                }
              }
            },
            required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
          }
        }
      }
    }
  }
}"
`;

exports[`Reference Read Reference 1`] = `
"Reference {
  keyToc: '$.1',
  uri: '../../demo/reference/hola2.yaml',
  contentType: 'application/json',
  charset: 'utf-8',
  bytes: 3000,
  api: {
    openapi: '3.1.0',
    info: { title: 'hello2', version: '1.0' },
    servers: [ { url: 'http://localhost:3000' } ],
    paths: {
      '/users/{userId}': {
        parameters: [
          {
            schema: { type: 'integer' },
            name: 'userId',
            in: 'path',
            required: true,
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Id of an existing **user**.',
                  text: 'Id of an existing **user**.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Id of an existing ',
                      text: 'Id of an existing '
                    },
                    {
                      type: 'strong',
                      raw: '**user**',
                      text: 'user',
                      tokens: [ { type: 'text', raw: 'user', text: 'user' } ]
                    },
                    { type: 'text', raw: '.', text: '.' }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        ],
        get: {
          summary: 'Get User Info by User ID',
          tags: [],
          responses: {
            '200': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Found',
                    text: 'User Found',
                    tokens: [ { type: 'text', raw: 'User Found', text: 'User Found' } ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              },
              content: {
                'application/json': {
                  schema: {
                    title: 'User',
                    type: 'object',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [ links: [Object: null prototype] {} ],
                      links: [Object: null prototype] {}
                    },
                    examples: [
                      {
                        id: 142,
                        firstName: 'Alice',
                        lastName: 'Smith',
                        email: 'alice.smith@gmail.com',
                        dateOfBirth: '1997-10-31',
                        emailVerified: true,
                        signUpDate: '2019-08-24'
                      }
                    ],
                    properties: {
                      id: {
                        type: 'integer',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'Unique identifier for the given user.',
                              text: 'Unique identifier for the given user.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'Unique identifier for the given user.',
                                  text: 'Unique identifier for the given user.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      firstName: { type: 'string' },
                      lastName: { type: 'string' },
                      email: { type: 'string', format: 'email' },
                      dateOfBirth: {
                        type: 'string',
                        format: 'date',
                        example: '1997-10-31'
                      },
                      emailVerified: {
                        type: 'boolean',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: \\"Set to true if the user's email has been verified.\\",
                              text: \\"Set to true if the user's email has been verified.\\",
                              tokens: [
                                {
                                  type: 'text',
                                  raw: \\"Set to true if the user's email has been verified.\\",
                                  text: 'Set to true if the user&#39;s email has been verified.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      createDate: {
                        type: 'string',
                        format: 'date',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'The date that the user was created.',
                              text: 'The date that the user was created.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'The date that the user was created.',
                                  text: 'The date that the user was created.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      }
                    },
                    required: [
                      'id',
                      'firstName',
                      'lastName',
                      'email',
                      'emailVerified'
                    ]
                  },
                  examples: {
                    'Get User Alice Smith': {
                      value: {
                        id: 142,
                        firstName: 'Alice',
                        lastName: 'Smith',
                        email: 'alice.smith@gmail.com',
                        dateOfBirth: '1997-10-31',
                        emailVerified: true,
                        signUpDate: '2019-08-24'
                      }
                    }
                  }
                }
              }
            },
            '404': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Not Found',
                    text: 'User Not Found',
                    tokens: [
                      { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          operationId: 'get-users-userId',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Retrieve the information of the user with the matching user ID.',
                text: 'Retrieve the information of the user with the matching user ID.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Retrieve the information of the user with the matching user ID.',
                    text: 'Retrieve the information of the user with the matching user ID.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        },
        patch: {
          summary: 'Update User Information',
          operationId: 'patch-users-userId',
          responses: {
            '200': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Updated',
                    text: 'User Updated',
                    tokens: [ { type: 'text', raw: 'User Updated', text: 'User Updated' } ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              },
              content: {
                'application/json': {
                  schema: {
                    title: 'User',
                    type: 'object',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [ links: [Object: null prototype] {} ],
                      links: [Object: null prototype] {}
                    },
                    examples: [
                      {
                        id: 142,
                        firstName: 'Alice',
                        lastName: 'Smith',
                        email: 'alice.smith@gmail.com',
                        dateOfBirth: '1997-10-31',
                        emailVerified: true,
                        signUpDate: '2019-08-24'
                      }
                    ],
                    properties: {
                      id: {
                        type: 'integer',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'Unique identifier for the given user.',
                              text: 'Unique identifier for the given user.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'Unique identifier for the given user.',
                                  text: 'Unique identifier for the given user.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      firstName: { type: 'string' },
                      lastName: { type: 'string' },
                      email: { type: 'string', format: 'email' },
                      dateOfBirth: {
                        type: 'string',
                        format: 'date',
                        example: '1997-10-31'
                      },
                      emailVerified: {
                        type: 'boolean',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: \\"Set to true if the user's email has been verified.\\",
                              text: \\"Set to true if the user's email has been verified.\\",
                              tokens: [
                                {
                                  type: 'text',
                                  raw: \\"Set to true if the user's email has been verified.\\",
                                  text: 'Set to true if the user&#39;s email has been verified.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      createDate: {
                        type: 'string',
                        format: 'date',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'The date that the user was created.',
                              text: 'The date that the user was created.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'The date that the user was created.',
                                  text: 'The date that the user was created.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      }
                    },
                    required: [
                      'id',
                      'firstName',
                      'lastName',
                      'email',
                      'emailVerified'
                    ]
                  },
                  examples: {
                    'Updated User Rebecca Baker': {
                      value: {
                        id: 13,
                        firstName: 'Rebecca',
                        lastName: 'Baker',
                        email: 'rebecca@gmail.com',
                        dateOfBirth: '1985-10-02',
                        emailVerified: false,
                        createDate: '2019-08-24'
                      }
                    }
                  }
                }
              }
            },
            '404': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Not Found',
                    text: 'User Not Found',
                    tokens: [
                      { type: 'text', raw: 'User Not Found', text: 'User Not Found' }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            '409': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Email Already Taken',
                    text: 'Email Already Taken',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Email Already Taken',
                        text: 'Email Already Taken'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Update the information of an existing user.',
                text: 'Update the information of an existing user.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Update the information of an existing user.',
                    text: 'Update the information of an existing user.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          },
          requestBody: {
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    firstName: { type: 'string' },
                    lastName: { type: 'string' },
                    email: {
                      type: 'string',
                      description: Documentation {
                        keyToc: '$.1',
                        uri: '../../demo/reference/hola2.yaml',
                        contentType: 'application/json',
                        charset: 'utf-8',
                        bytes: 3000,
                        tokens: [
                          {
                            type: 'paragraph',
                            raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                            text: \\"If a new email is given, the user's email verified property will be set to false.\\",
                            tokens: [
                              {
                                type: 'text',
                                raw: \\"If a new email is given, the user's email verified property will be set to false.\\",
                                text: 'If a new email is given, the user&#39;s email verified property will be set to false.'
                              }
                            ]
                          },
                          links: [Object: null prototype] {}
                        ],
                        links: [Object: null prototype] {}
                      }
                    },
                    dateOfBirth: { type: 'string' }
                  }
                },
                examples: {
                  'Update First Name': { value: { firstName: 'Rebecca' } },
                  'Update Email': { value: { email: 'rebecca@gmail.com' } },
                  'Update Last Name & Date of Birth': {
                    value: { lastName: 'Baker', dateOfBirth: '1985-10-02' }
                  }
                }
              }
            },
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Patch user properties to update.',
                  text: 'Patch user properties to update.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Patch user properties to update.',
                      text: 'Patch user properties to update.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          }
        }
      },
      '/user': {
        post: {
          summary: 'Create New User',
          operationId: 'post-user',
          responses: {
            '200': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'User Created',
                    text: 'User Created',
                    tokens: [ { type: 'text', raw: 'User Created', text: 'User Created' } ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              },
              content: {
                'application/json': {
                  schema: {
                    title: 'User',
                    type: 'object',
                    description: Documentation {
                      keyToc: '$.1',
                      uri: '../../demo/reference/hola2.yaml',
                      contentType: 'application/json',
                      charset: 'utf-8',
                      bytes: 3000,
                      tokens: [ links: [Object: null prototype] {} ],
                      links: [Object: null prototype] {}
                    },
                    examples: [
                      {
                        id: 142,
                        firstName: 'Alice',
                        lastName: 'Smith',
                        email: 'alice.smith@gmail.com',
                        dateOfBirth: '1997-10-31',
                        emailVerified: true,
                        signUpDate: '2019-08-24'
                      }
                    ],
                    properties: {
                      id: {
                        type: 'integer',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'Unique identifier for the given user.',
                              text: 'Unique identifier for the given user.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'Unique identifier for the given user.',
                                  text: 'Unique identifier for the given user.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      firstName: { type: 'string' },
                      lastName: { type: 'string' },
                      email: { type: 'string', format: 'email' },
                      dateOfBirth: {
                        type: 'string',
                        format: 'date',
                        example: '1997-10-31'
                      },
                      emailVerified: {
                        type: 'boolean',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: \\"Set to true if the user's email has been verified.\\",
                              text: \\"Set to true if the user's email has been verified.\\",
                              tokens: [
                                {
                                  type: 'text',
                                  raw: \\"Set to true if the user's email has been verified.\\",
                                  text: 'Set to true if the user&#39;s email has been verified.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      createDate: {
                        type: 'string',
                        format: 'date',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'The date that the user was created.',
                              text: 'The date that the user was created.',
                              tokens: [
                                {
                                  type: 'text',
                                  raw: 'The date that the user was created.',
                                  text: 'The date that the user was created.'
                                }
                              ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      }
                    },
                    required: [
                      'id',
                      'firstName',
                      'lastName',
                      'email',
                      'emailVerified'
                    ]
                  },
                  examples: {
                    'New User Bob Fellow': {
                      value: {
                        id: 12,
                        firstName: 'Bob',
                        lastName: 'Fellow',
                        email: 'bob.fellow@gmail.com',
                        dateOfBirth: '1996-08-24',
                        emailVerified: false,
                        createDate: '2020-11-18'
                      }
                    }
                  }
                }
              }
            },
            '400': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Missing Required Information',
                    text: 'Missing Required Information',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Missing Required Information',
                        text: 'Missing Required Information'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            '409': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Email Already Taken',
                    text: 'Email Already Taken',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Email Already Taken',
                        text: 'Email Already Taken'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          requestBody: {
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    firstName: { type: 'string' },
                    lastName: { type: 'string' },
                    email: { type: 'string' },
                    dateOfBirth: { type: 'string', format: 'date' }
                  },
                  required: [ 'firstName', 'lastName', 'email', 'dateOfBirth' ]
                },
                examples: {
                  'Create User Bob Fellow': {
                    value: {
                      firstName: 'Bob',
                      lastName: 'Fellow',
                      email: 'bob.fellow@gmail.com',
                      dateOfBirth: '1996-08-24'
                    }
                  }
                }
              }
            },
            description: Documentation {
              keyToc: '$.1',
              uri: '../../demo/reference/hola2.yaml',
              contentType: 'application/json',
              charset: 'utf-8',
              bytes: 3000,
              tokens: [
                {
                  type: 'paragraph',
                  raw: 'Post the necessary fields for the API to create a new user.',
                  text: 'Post the necessary fields for the API to create a new user.',
                  tokens: [
                    {
                      type: 'text',
                      raw: 'Post the necessary fields for the API to create a new user.',
                      text: 'Post the necessary fields for the API to create a new user.'
                    }
                  ]
                },
                links: [Object: null prototype] {}
              ],
              links: [Object: null prototype] {}
            }
          },
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'Create a new user.',
                text: 'Create a new user.',
                tokens: [
                  {
                    type: 'text',
                    raw: 'Create a new user.',
                    text: 'Create a new user.'
                  }
                ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          }
        }
      },
      '/car/{lk}': {
        post: {
          summary: 'Create Car',
          operationId: 'post-car',
          responses: {
            '200': {
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Car Section',
                    text: 'Car Section',
                    tokens: [ { type: 'text', raw: 'Car Section', text: 'Car Section' } ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              },
              content: {
                'application/json': {
                  schema: {
                    '$schema': 'http://json-schema.org/draft-07/schema',
                    type: 'object',
                    title: 'Car',
                    properties: {
                      roles: {
                        type: 'number',
                        title: 'roles',
                        description: Documentation {
                          keyToc: '$.1',
                          uri: '../../demo/reference/hola2.yaml',
                          contentType: 'application/json',
                          charset: 'utf-8',
                          bytes: 3000,
                          tokens: [
                            {
                              type: 'paragraph',
                              raw: 'Roles number',
                              text: 'Roles number',
                              tokens: [ { type: 'text', raw: 'Roles number', text: 'Roles number' } ]
                            },
                            links: [Object: null prototype] {}
                          ],
                          links: [Object: null prototype] {}
                        }
                      },
                      color: { type: 'string', enum: [ 'red', 'green' ] }
                    }
                  }
                }
              }
            }
          },
          'x-internal': true,
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [
              {
                type: 'paragraph',
                raw: 'hjklhkj',
                text: 'hjklhkj',
                tokens: [ { type: 'text', raw: 'hjklhkj', text: 'hjklhkj' } ]
              },
              links: [Object: null prototype] {}
            ],
            links: [Object: null prototype] {}
          },
          deprecated: true
        },
        parameters: [
          {
            schema: { type: 'string' },
            name: 'lk',
            in: 'path',
            required: true
          }
        ]
      }
    },
    components: {
      schemas: {
        User: {
          title: 'User',
          type: 'object',
          description: Documentation {
            keyToc: '$.1',
            uri: '../../demo/reference/hola2.yaml',
            contentType: 'application/json',
            charset: 'utf-8',
            bytes: 3000,
            tokens: [ links: [Object: null prototype] {} ],
            links: [Object: null prototype] {}
          },
          examples: [
            {
              id: 142,
              firstName: 'Alice',
              lastName: 'Smith',
              email: 'alice.smith@gmail.com',
              dateOfBirth: '1997-10-31',
              emailVerified: true,
              signUpDate: '2019-08-24'
            }
          ],
          properties: {
            id: {
              type: 'integer',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'Unique identifier for the given user.',
                    text: 'Unique identifier for the given user.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'Unique identifier for the given user.',
                        text: 'Unique identifier for the given user.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            firstName: { type: 'string' },
            lastName: { type: 'string' },
            email: { type: 'string', format: 'email' },
            dateOfBirth: { type: 'string', format: 'date', example: '1997-10-31' },
            emailVerified: {
              type: 'boolean',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: \\"Set to true if the user's email has been verified.\\",
                    text: \\"Set to true if the user's email has been verified.\\",
                    tokens: [
                      {
                        type: 'text',
                        raw: \\"Set to true if the user's email has been verified.\\",
                        text: 'Set to true if the user&#39;s email has been verified.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            },
            createDate: {
              type: 'string',
              format: 'date',
              description: Documentation {
                keyToc: '$.1',
                uri: '../../demo/reference/hola2.yaml',
                contentType: 'application/json',
                charset: 'utf-8',
                bytes: 3000,
                tokens: [
                  {
                    type: 'paragraph',
                    raw: 'The date that the user was created.',
                    text: 'The date that the user was created.',
                    tokens: [
                      {
                        type: 'text',
                        raw: 'The date that the user was created.',
                        text: 'The date that the user was created.'
                      }
                    ]
                  },
                  links: [Object: null prototype] {}
                ],
                links: [Object: null prototype] {}
              }
            }
          },
          required: [ 'id', 'firstName', 'lastName', 'email', 'emailVerified' ]
        }
      }
    }
  }
}"
`;

exports[`Reference shoud make export 1`] = `
"{
  \\"type\\": \\"item\\",
  \\"title\\": \\"Hola\\",
  \\"typeItem\\": \\"reference\\",
  \\"api\\": {
    \\"openapi\\": \\"3.1.0\\",
    \\"info\\": {
      \\"title\\": \\"hello2\\",
      \\"version\\": \\"1.0\\"
    },
    \\"servers\\": [
      {
        \\"url\\": \\"http://localhost:3000\\"
      }
    ],
    \\"paths\\": {
      \\"/users/{userId}\\": {
        \\"parameters\\": [
          {
            \\"schema\\": {
              \\"type\\": \\"integer\\"
            },
            \\"name\\": \\"userId\\",
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"description\\": {
              \\"type\\": \\"item\\",
              \\"title\\": \\"Hola\\",
              \\"typeItem\\": \\"documentation\\",
              \\"tokens\\": [
                {
                  \\"type\\": \\"paragraph\\",
                  \\"raw\\": \\"Id of an existing **user**.\\",
                  \\"text\\": \\"Id of an existing **user**.\\",
                  \\"tokens\\": [
                    {
                      \\"type\\": \\"text\\",
                      \\"raw\\": \\"Id of an existing \\",
                      \\"text\\": \\"Id of an existing \\"
                    },
                    {
                      \\"type\\": \\"strong\\",
                      \\"raw\\": \\"**user**\\",
                      \\"text\\": \\"user\\",
                      \\"tokens\\": [
                        {
                          \\"type\\": \\"text\\",
                          \\"raw\\": \\"user\\",
                          \\"text\\": \\"user\\"
                        }
                      ]
                    },
                    {
                      \\"type\\": \\"text\\",
                      \\"raw\\": \\".\\",
                      \\"text\\": \\".\\"
                    }
                  ]
                }
              ],
              \\"links\\": {}
            }
          }
        ],
        \\"get\\": {
          \\"summary\\": \\"Get User Info by User ID\\",
          \\"tags\\": [],
          \\"responses\\": {
            \\"200\\": {
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"User Found\\",
                    \\"text\\": \\"User Found\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"User Found\\",
                        \\"text\\": \\"User Found\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              },
              \\"content\\": {
                \\"application/json\\": {
                  \\"schema\\": {
                    \\"title\\": \\"User\\",
                    \\"type\\": \\"object\\",
                    \\"description\\": {
                      \\"type\\": \\"item\\",
                      \\"title\\": \\"Hola\\",
                      \\"typeItem\\": \\"documentation\\",
                      \\"tokens\\": [],
                      \\"links\\": {}
                    },
                    \\"examples\\": [
                      {
                        \\"id\\": 142,
                        \\"firstName\\": \\"Alice\\",
                        \\"lastName\\": \\"Smith\\",
                        \\"email\\": \\"alice.smith@gmail.com\\",
                        \\"dateOfBirth\\": \\"1997-10-31\\",
                        \\"emailVerified\\": true,
                        \\"signUpDate\\": \\"2019-08-24\\"
                      }
                    ],
                    \\"properties\\": {
                      \\"id\\": {
                        \\"type\\": \\"integer\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"Unique identifier for the given user.\\",
                              \\"text\\": \\"Unique identifier for the given user.\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"Unique identifier for the given user.\\",
                                  \\"text\\": \\"Unique identifier for the given user.\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      },
                      \\"firstName\\": {
                        \\"type\\": \\"string\\"
                      },
                      \\"lastName\\": {
                        \\"type\\": \\"string\\"
                      },
                      \\"email\\": {
                        \\"type\\": \\"string\\",
                        \\"format\\": \\"email\\"
                      },
                      \\"dateOfBirth\\": {
                        \\"type\\": \\"string\\",
                        \\"format\\": \\"date\\",
                        \\"example\\": \\"1997-10-31\\"
                      },
                      \\"emailVerified\\": {
                        \\"type\\": \\"boolean\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"Set to true if the user's email has been verified.\\",
                              \\"text\\": \\"Set to true if the user's email has been verified.\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"Set to true if the user's email has been verified.\\",
                                  \\"text\\": \\"Set to true if the user&#39;s email has been verified.\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      },
                      \\"createDate\\": {
                        \\"type\\": \\"string\\",
                        \\"format\\": \\"date\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"The date that the user was created.\\",
                              \\"text\\": \\"The date that the user was created.\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"The date that the user was created.\\",
                                  \\"text\\": \\"The date that the user was created.\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      }
                    },
                    \\"required\\": [
                      \\"id\\",
                      \\"firstName\\",
                      \\"lastName\\",
                      \\"email\\",
                      \\"emailVerified\\"
                    ]
                  },
                  \\"examples\\": {
                    \\"Get User Alice Smith\\": {
                      \\"value\\": {
                        \\"id\\": 142,
                        \\"firstName\\": \\"Alice\\",
                        \\"lastName\\": \\"Smith\\",
                        \\"email\\": \\"alice.smith@gmail.com\\",
                        \\"dateOfBirth\\": \\"1997-10-31\\",
                        \\"emailVerified\\": true,
                        \\"signUpDate\\": \\"2019-08-24\\"
                      }
                    }
                  }
                }
              }
            },
            \\"404\\": {
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"User Not Found\\",
                    \\"text\\": \\"User Not Found\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"User Not Found\\",
                        \\"text\\": \\"User Not Found\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              }
            }
          },
          \\"operationId\\": \\"get-users-userId\\",
          \\"description\\": {
            \\"type\\": \\"item\\",
            \\"title\\": \\"Hola\\",
            \\"typeItem\\": \\"documentation\\",
            \\"tokens\\": [
              {
                \\"type\\": \\"paragraph\\",
                \\"raw\\": \\"Retrieve the information of the user with the matching user ID.\\",
                \\"text\\": \\"Retrieve the information of the user with the matching user ID.\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"text\\",
                    \\"raw\\": \\"Retrieve the information of the user with the matching user ID.\\",
                    \\"text\\": \\"Retrieve the information of the user with the matching user ID.\\"
                  }
                ]
              }
            ],
            \\"links\\": {}
          }
        },
        \\"patch\\": {
          \\"summary\\": \\"Update User Information\\",
          \\"operationId\\": \\"patch-users-userId\\",
          \\"responses\\": {
            \\"200\\": {
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"User Updated\\",
                    \\"text\\": \\"User Updated\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"User Updated\\",
                        \\"text\\": \\"User Updated\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              },
              \\"content\\": {
                \\"application/json\\": {
                  \\"schema\\": {
                    \\"title\\": \\"User\\",
                    \\"type\\": \\"object\\",
                    \\"description\\": {
                      \\"type\\": \\"item\\",
                      \\"title\\": \\"Hola\\",
                      \\"typeItem\\": \\"documentation\\",
                      \\"tokens\\": [],
                      \\"links\\": {}
                    },
                    \\"examples\\": [
                      {
                        \\"id\\": 142,
                        \\"firstName\\": \\"Alice\\",
                        \\"lastName\\": \\"Smith\\",
                        \\"email\\": \\"alice.smith@gmail.com\\",
                        \\"dateOfBirth\\": \\"1997-10-31\\",
                        \\"emailVerified\\": true,
                        \\"signUpDate\\": \\"2019-08-24\\"
                      }
                    ],
                    \\"properties\\": {
                      \\"id\\": {
                        \\"type\\": \\"integer\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"Unique identifier for the given user.\\",
                              \\"text\\": \\"Unique identifier for the given user.\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"Unique identifier for the given user.\\",
                                  \\"text\\": \\"Unique identifier for the given user.\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      },
                      \\"firstName\\": {
                        \\"type\\": \\"string\\"
                      },
                      \\"lastName\\": {
                        \\"type\\": \\"string\\"
                      },
                      \\"email\\": {
                        \\"type\\": \\"string\\",
                        \\"format\\": \\"email\\"
                      },
                      \\"dateOfBirth\\": {
                        \\"type\\": \\"string\\",
                        \\"format\\": \\"date\\",
                        \\"example\\": \\"1997-10-31\\"
                      },
                      \\"emailVerified\\": {
                        \\"type\\": \\"boolean\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"Set to true if the user's email has been verified.\\",
                              \\"text\\": \\"Set to true if the user's email has been verified.\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"Set to true if the user's email has been verified.\\",
                                  \\"text\\": \\"Set to true if the user&#39;s email has been verified.\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      },
                      \\"createDate\\": {
                        \\"type\\": \\"string\\",
                        \\"format\\": \\"date\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"The date that the user was created.\\",
                              \\"text\\": \\"The date that the user was created.\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"The date that the user was created.\\",
                                  \\"text\\": \\"The date that the user was created.\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      }
                    },
                    \\"required\\": [
                      \\"id\\",
                      \\"firstName\\",
                      \\"lastName\\",
                      \\"email\\",
                      \\"emailVerified\\"
                    ]
                  },
                  \\"examples\\": {
                    \\"Updated User Rebecca Baker\\": {
                      \\"value\\": {
                        \\"id\\": 13,
                        \\"firstName\\": \\"Rebecca\\",
                        \\"lastName\\": \\"Baker\\",
                        \\"email\\": \\"rebecca@gmail.com\\",
                        \\"dateOfBirth\\": \\"1985-10-02\\",
                        \\"emailVerified\\": false,
                        \\"createDate\\": \\"2019-08-24\\"
                      }
                    }
                  }
                }
              }
            },
            \\"404\\": {
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"User Not Found\\",
                    \\"text\\": \\"User Not Found\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"User Not Found\\",
                        \\"text\\": \\"User Not Found\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              }
            },
            \\"409\\": {
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"Email Already Taken\\",
                    \\"text\\": \\"Email Already Taken\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"Email Already Taken\\",
                        \\"text\\": \\"Email Already Taken\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              }
            }
          },
          \\"description\\": {
            \\"type\\": \\"item\\",
            \\"title\\": \\"Hola\\",
            \\"typeItem\\": \\"documentation\\",
            \\"tokens\\": [
              {
                \\"type\\": \\"paragraph\\",
                \\"raw\\": \\"Update the information of an existing user.\\",
                \\"text\\": \\"Update the information of an existing user.\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"text\\",
                    \\"raw\\": \\"Update the information of an existing user.\\",
                    \\"text\\": \\"Update the information of an existing user.\\"
                  }
                ]
              }
            ],
            \\"links\\": {}
          },
          \\"requestBody\\": {
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"object\\",
                  \\"properties\\": {
                    \\"firstName\\": {
                      \\"type\\": \\"string\\"
                    },
                    \\"lastName\\": {
                      \\"type\\": \\"string\\"
                    },
                    \\"email\\": {
                      \\"type\\": \\"string\\",
                      \\"description\\": {
                        \\"type\\": \\"item\\",
                        \\"title\\": \\"Hola\\",
                        \\"typeItem\\": \\"documentation\\",
                        \\"tokens\\": [
                          {
                            \\"type\\": \\"paragraph\\",
                            \\"raw\\": \\"If a new email is given, the user's email verified property will be set to false.\\",
                            \\"text\\": \\"If a new email is given, the user's email verified property will be set to false.\\",
                            \\"tokens\\": [
                              {
                                \\"type\\": \\"text\\",
                                \\"raw\\": \\"If a new email is given, the user's email verified property will be set to false.\\",
                                \\"text\\": \\"If a new email is given, the user&#39;s email verified property will be set to false.\\"
                              }
                            ]
                          }
                        ],
                        \\"links\\": {}
                      }
                    },
                    \\"dateOfBirth\\": {
                      \\"type\\": \\"string\\"
                    }
                  }
                },
                \\"examples\\": {
                  \\"Update First Name\\": {
                    \\"value\\": {
                      \\"firstName\\": \\"Rebecca\\"
                    }
                  },
                  \\"Update Email\\": {
                    \\"value\\": {
                      \\"email\\": \\"rebecca@gmail.com\\"
                    }
                  },
                  \\"Update Last Name & Date of Birth\\": {
                    \\"value\\": {
                      \\"lastName\\": \\"Baker\\",
                      \\"dateOfBirth\\": \\"1985-10-02\\"
                    }
                  }
                }
              }
            },
            \\"description\\": {
              \\"type\\": \\"item\\",
              \\"title\\": \\"Hola\\",
              \\"typeItem\\": \\"documentation\\",
              \\"tokens\\": [
                {
                  \\"type\\": \\"paragraph\\",
                  \\"raw\\": \\"Patch user properties to update.\\",
                  \\"text\\": \\"Patch user properties to update.\\",
                  \\"tokens\\": [
                    {
                      \\"type\\": \\"text\\",
                      \\"raw\\": \\"Patch user properties to update.\\",
                      \\"text\\": \\"Patch user properties to update.\\"
                    }
                  ]
                }
              ],
              \\"links\\": {}
            }
          }
        }
      },
      \\"/user\\": {
        \\"post\\": {
          \\"summary\\": \\"Create New User\\",
          \\"operationId\\": \\"post-user\\",
          \\"responses\\": {
            \\"200\\": {
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"User Created\\",
                    \\"text\\": \\"User Created\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"User Created\\",
                        \\"text\\": \\"User Created\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              },
              \\"content\\": {
                \\"application/json\\": {
                  \\"schema\\": {
                    \\"title\\": \\"User\\",
                    \\"type\\": \\"object\\",
                    \\"description\\": {
                      \\"type\\": \\"item\\",
                      \\"title\\": \\"Hola\\",
                      \\"typeItem\\": \\"documentation\\",
                      \\"tokens\\": [],
                      \\"links\\": {}
                    },
                    \\"examples\\": [
                      {
                        \\"id\\": 142,
                        \\"firstName\\": \\"Alice\\",
                        \\"lastName\\": \\"Smith\\",
                        \\"email\\": \\"alice.smith@gmail.com\\",
                        \\"dateOfBirth\\": \\"1997-10-31\\",
                        \\"emailVerified\\": true,
                        \\"signUpDate\\": \\"2019-08-24\\"
                      }
                    ],
                    \\"properties\\": {
                      \\"id\\": {
                        \\"type\\": \\"integer\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"Unique identifier for the given user.\\",
                              \\"text\\": \\"Unique identifier for the given user.\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"Unique identifier for the given user.\\",
                                  \\"text\\": \\"Unique identifier for the given user.\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      },
                      \\"firstName\\": {
                        \\"type\\": \\"string\\"
                      },
                      \\"lastName\\": {
                        \\"type\\": \\"string\\"
                      },
                      \\"email\\": {
                        \\"type\\": \\"string\\",
                        \\"format\\": \\"email\\"
                      },
                      \\"dateOfBirth\\": {
                        \\"type\\": \\"string\\",
                        \\"format\\": \\"date\\",
                        \\"example\\": \\"1997-10-31\\"
                      },
                      \\"emailVerified\\": {
                        \\"type\\": \\"boolean\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"Set to true if the user's email has been verified.\\",
                              \\"text\\": \\"Set to true if the user's email has been verified.\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"Set to true if the user's email has been verified.\\",
                                  \\"text\\": \\"Set to true if the user&#39;s email has been verified.\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      },
                      \\"createDate\\": {
                        \\"type\\": \\"string\\",
                        \\"format\\": \\"date\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"The date that the user was created.\\",
                              \\"text\\": \\"The date that the user was created.\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"The date that the user was created.\\",
                                  \\"text\\": \\"The date that the user was created.\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      }
                    },
                    \\"required\\": [
                      \\"id\\",
                      \\"firstName\\",
                      \\"lastName\\",
                      \\"email\\",
                      \\"emailVerified\\"
                    ]
                  },
                  \\"examples\\": {
                    \\"New User Bob Fellow\\": {
                      \\"value\\": {
                        \\"id\\": 12,
                        \\"firstName\\": \\"Bob\\",
                        \\"lastName\\": \\"Fellow\\",
                        \\"email\\": \\"bob.fellow@gmail.com\\",
                        \\"dateOfBirth\\": \\"1996-08-24\\",
                        \\"emailVerified\\": false,
                        \\"createDate\\": \\"2020-11-18\\"
                      }
                    }
                  }
                }
              }
            },
            \\"400\\": {
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"Missing Required Information\\",
                    \\"text\\": \\"Missing Required Information\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"Missing Required Information\\",
                        \\"text\\": \\"Missing Required Information\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              }
            },
            \\"409\\": {
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"Email Already Taken\\",
                    \\"text\\": \\"Email Already Taken\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"Email Already Taken\\",
                        \\"text\\": \\"Email Already Taken\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              }
            }
          },
          \\"requestBody\\": {
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"object\\",
                  \\"properties\\": {
                    \\"firstName\\": {
                      \\"type\\": \\"string\\"
                    },
                    \\"lastName\\": {
                      \\"type\\": \\"string\\"
                    },
                    \\"email\\": {
                      \\"type\\": \\"string\\"
                    },
                    \\"dateOfBirth\\": {
                      \\"type\\": \\"string\\",
                      \\"format\\": \\"date\\"
                    }
                  },
                  \\"required\\": [
                    \\"firstName\\",
                    \\"lastName\\",
                    \\"email\\",
                    \\"dateOfBirth\\"
                  ]
                },
                \\"examples\\": {
                  \\"Create User Bob Fellow\\": {
                    \\"value\\": {
                      \\"firstName\\": \\"Bob\\",
                      \\"lastName\\": \\"Fellow\\",
                      \\"email\\": \\"bob.fellow@gmail.com\\",
                      \\"dateOfBirth\\": \\"1996-08-24\\"
                    }
                  }
                }
              }
            },
            \\"description\\": {
              \\"type\\": \\"item\\",
              \\"title\\": \\"Hola\\",
              \\"typeItem\\": \\"documentation\\",
              \\"tokens\\": [
                {
                  \\"type\\": \\"paragraph\\",
                  \\"raw\\": \\"Post the necessary fields for the API to create a new user.\\",
                  \\"text\\": \\"Post the necessary fields for the API to create a new user.\\",
                  \\"tokens\\": [
                    {
                      \\"type\\": \\"text\\",
                      \\"raw\\": \\"Post the necessary fields for the API to create a new user.\\",
                      \\"text\\": \\"Post the necessary fields for the API to create a new user.\\"
                    }
                  ]
                }
              ],
              \\"links\\": {}
            }
          },
          \\"description\\": {
            \\"type\\": \\"item\\",
            \\"title\\": \\"Hola\\",
            \\"typeItem\\": \\"documentation\\",
            \\"tokens\\": [
              {
                \\"type\\": \\"paragraph\\",
                \\"raw\\": \\"Create a new user.\\",
                \\"text\\": \\"Create a new user.\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"text\\",
                    \\"raw\\": \\"Create a new user.\\",
                    \\"text\\": \\"Create a new user.\\"
                  }
                ]
              }
            ],
            \\"links\\": {}
          }
        }
      },
      \\"/car/{lk}\\": {
        \\"post\\": {
          \\"summary\\": \\"Create Car\\",
          \\"operationId\\": \\"post-car\\",
          \\"responses\\": {
            \\"200\\": {
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"Car Section\\",
                    \\"text\\": \\"Car Section\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"Car Section\\",
                        \\"text\\": \\"Car Section\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              },
              \\"content\\": {
                \\"application/json\\": {
                  \\"schema\\": {
                    \\"$schema\\": \\"http://json-schema.org/draft-07/schema\\",
                    \\"type\\": \\"object\\",
                    \\"title\\": \\"Car\\",
                    \\"properties\\": {
                      \\"roles\\": {
                        \\"type\\": \\"number\\",
                        \\"title\\": \\"roles\\",
                        \\"description\\": {
                          \\"type\\": \\"item\\",
                          \\"title\\": \\"Hola\\",
                          \\"typeItem\\": \\"documentation\\",
                          \\"tokens\\": [
                            {
                              \\"type\\": \\"paragraph\\",
                              \\"raw\\": \\"Roles number\\",
                              \\"text\\": \\"Roles number\\",
                              \\"tokens\\": [
                                {
                                  \\"type\\": \\"text\\",
                                  \\"raw\\": \\"Roles number\\",
                                  \\"text\\": \\"Roles number\\"
                                }
                              ]
                            }
                          ],
                          \\"links\\": {}
                        }
                      },
                      \\"color\\": {
                        \\"type\\": \\"string\\",
                        \\"enum\\": [
                          \\"red\\",
                          \\"green\\"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          \\"x-internal\\": true,
          \\"description\\": {
            \\"type\\": \\"item\\",
            \\"title\\": \\"Hola\\",
            \\"typeItem\\": \\"documentation\\",
            \\"tokens\\": [
              {
                \\"type\\": \\"paragraph\\",
                \\"raw\\": \\"hjklhkj\\",
                \\"text\\": \\"hjklhkj\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"text\\",
                    \\"raw\\": \\"hjklhkj\\",
                    \\"text\\": \\"hjklhkj\\"
                  }
                ]
              }
            ],
            \\"links\\": {}
          },
          \\"deprecated\\": true
        },
        \\"parameters\\": [
          {
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"lk\\",
            \\"in\\": \\"path\\",
            \\"required\\": true
          }
        ]
      }
    },
    \\"components\\": {
      \\"schemas\\": {
        \\"User\\": {
          \\"title\\": \\"User\\",
          \\"type\\": \\"object\\",
          \\"description\\": {
            \\"type\\": \\"item\\",
            \\"title\\": \\"Hola\\",
            \\"typeItem\\": \\"documentation\\",
            \\"tokens\\": [],
            \\"links\\": {}
          },
          \\"examples\\": [
            {
              \\"id\\": 142,
              \\"firstName\\": \\"Alice\\",
              \\"lastName\\": \\"Smith\\",
              \\"email\\": \\"alice.smith@gmail.com\\",
              \\"dateOfBirth\\": \\"1997-10-31\\",
              \\"emailVerified\\": true,
              \\"signUpDate\\": \\"2019-08-24\\"
            }
          ],
          \\"properties\\": {
            \\"id\\": {
              \\"type\\": \\"integer\\",
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"Unique identifier for the given user.\\",
                    \\"text\\": \\"Unique identifier for the given user.\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"Unique identifier for the given user.\\",
                        \\"text\\": \\"Unique identifier for the given user.\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              }
            },
            \\"firstName\\": {
              \\"type\\": \\"string\\"
            },
            \\"lastName\\": {
              \\"type\\": \\"string\\"
            },
            \\"email\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"email\\"
            },
            \\"dateOfBirth\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"date\\",
              \\"example\\": \\"1997-10-31\\"
            },
            \\"emailVerified\\": {
              \\"type\\": \\"boolean\\",
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"Set to true if the user's email has been verified.\\",
                    \\"text\\": \\"Set to true if the user's email has been verified.\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"Set to true if the user's email has been verified.\\",
                        \\"text\\": \\"Set to true if the user&#39;s email has been verified.\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              }
            },
            \\"createDate\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"date\\",
              \\"description\\": {
                \\"type\\": \\"item\\",
                \\"title\\": \\"Hola\\",
                \\"typeItem\\": \\"documentation\\",
                \\"tokens\\": [
                  {
                    \\"type\\": \\"paragraph\\",
                    \\"raw\\": \\"The date that the user was created.\\",
                    \\"text\\": \\"The date that the user was created.\\",
                    \\"tokens\\": [
                      {
                        \\"type\\": \\"text\\",
                        \\"raw\\": \\"The date that the user was created.\\",
                        \\"text\\": \\"The date that the user was created.\\"
                      }
                    ]
                  }
                ],
                \\"links\\": {}
              }
            }
          },
          \\"required\\": [
            \\"id\\",
            \\"firstName\\",
            \\"lastName\\",
            \\"email\\",
            \\"emailVerified\\"
          ]
        }
      }
    }
  }
}"
`;

exports[`Reference shoud make export 2`] = `
"type: item
title: Hola
typeItem: reference
api:
  openapi: 3.1.0
  info:
    title: hello2
    version: \\"1.0\\"
  servers:
    - url: http://localhost:3000
  paths:
    \\"/users/{userId}\\":
      parameters:
        - schema:
            type: integer
          name: userId
          in: path
          required: true
          description:
            type: item
            title: Hola
            typeItem: documentation
            tokens:
              - type: paragraph
                raw: Id of an existing **user**.
                text: Id of an existing **user**.
                tokens:
                  - type: text
                    raw: \\"Id of an existing \\"
                    text: \\"Id of an existing \\"
                  - type: strong
                    raw: \\"**user**\\"
                    text: user
                    tokens:
                      - type: text
                        raw: user
                        text: user
                  - type: text
                    raw: .
                    text: .
            links: {}
      get:
        summary: Get User Info by User ID
        tags: []
        responses:
          \\"200\\":
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: User Found
                  text: User Found
                  tokens:
                    - type: text
                      raw: User Found
                      text: User Found
              links: {}
            content:
              application/json:
                schema:
                  title: User
                  type: object
                  description:
                    type: item
                    title: Hola
                    typeItem: documentation
                    tokens: []
                    links: {}
                  examples:
                    - id: 142
                      firstName: Alice
                      lastName: Smith
                      email: alice.smith@gmail.com
                      dateOfBirth: 1997-10-31
                      emailVerified: true
                      signUpDate: 2019-08-24
                  properties:
                    id:
                      type: integer
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: Unique identifier for the given user.
                            text: Unique identifier for the given user.
                            tokens:
                              - type: text
                                raw: Unique identifier for the given user.
                                text: Unique identifier for the given user.
                        links: {}
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                      format: email
                    dateOfBirth:
                      type: string
                      format: date
                      example: 1997-10-31
                    emailVerified:
                      type: boolean
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: Set to true if the user's email has been verified.
                            text: Set to true if the user's email has been verified.
                            tokens:
                              - type: text
                                raw: Set to true if the user's email has been verified.
                                text: Set to true if the user&#39;s email has been verified.
                        links: {}
                    createDate:
                      type: string
                      format: date
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: The date that the user was created.
                            text: The date that the user was created.
                            tokens:
                              - type: text
                                raw: The date that the user was created.
                                text: The date that the user was created.
                        links: {}
                  required:
                    - id
                    - firstName
                    - lastName
                    - email
                    - emailVerified
                examples:
                  Get User Alice Smith:
                    value:
                      id: 142
                      firstName: Alice
                      lastName: Smith
                      email: alice.smith@gmail.com
                      dateOfBirth: 1997-10-31
                      emailVerified: true
                      signUpDate: 2019-08-24
          \\"404\\":
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: User Not Found
                  text: User Not Found
                  tokens:
                    - type: text
                      raw: User Not Found
                      text: User Not Found
              links: {}
        operationId: get-users-userId
        description:
          type: item
          title: Hola
          typeItem: documentation
          tokens:
            - type: paragraph
              raw: Retrieve the information of the user with the matching user ID.
              text: Retrieve the information of the user with the matching user ID.
              tokens:
                - type: text
                  raw: Retrieve the information of the user with the matching user ID.
                  text: Retrieve the information of the user with the matching user ID.
          links: {}
      patch:
        summary: Update User Information
        operationId: patch-users-userId
        responses:
          \\"200\\":
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: User Updated
                  text: User Updated
                  tokens:
                    - type: text
                      raw: User Updated
                      text: User Updated
              links: {}
            content:
              application/json:
                schema:
                  title: User
                  type: object
                  description:
                    type: item
                    title: Hola
                    typeItem: documentation
                    tokens: []
                    links: {}
                  examples:
                    - id: 142
                      firstName: Alice
                      lastName: Smith
                      email: alice.smith@gmail.com
                      dateOfBirth: 1997-10-31
                      emailVerified: true
                      signUpDate: 2019-08-24
                  properties:
                    id:
                      type: integer
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: Unique identifier for the given user.
                            text: Unique identifier for the given user.
                            tokens:
                              - type: text
                                raw: Unique identifier for the given user.
                                text: Unique identifier for the given user.
                        links: {}
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                      format: email
                    dateOfBirth:
                      type: string
                      format: date
                      example: 1997-10-31
                    emailVerified:
                      type: boolean
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: Set to true if the user's email has been verified.
                            text: Set to true if the user's email has been verified.
                            tokens:
                              - type: text
                                raw: Set to true if the user's email has been verified.
                                text: Set to true if the user&#39;s email has been verified.
                        links: {}
                    createDate:
                      type: string
                      format: date
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: The date that the user was created.
                            text: The date that the user was created.
                            tokens:
                              - type: text
                                raw: The date that the user was created.
                                text: The date that the user was created.
                        links: {}
                  required:
                    - id
                    - firstName
                    - lastName
                    - email
                    - emailVerified
                examples:
                  Updated User Rebecca Baker:
                    value:
                      id: 13
                      firstName: Rebecca
                      lastName: Baker
                      email: rebecca@gmail.com
                      dateOfBirth: 1985-10-02
                      emailVerified: false
                      createDate: 2019-08-24
          \\"404\\":
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: User Not Found
                  text: User Not Found
                  tokens:
                    - type: text
                      raw: User Not Found
                      text: User Not Found
              links: {}
          \\"409\\":
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: Email Already Taken
                  text: Email Already Taken
                  tokens:
                    - type: text
                      raw: Email Already Taken
                      text: Email Already Taken
              links: {}
        description:
          type: item
          title: Hola
          typeItem: documentation
          tokens:
            - type: paragraph
              raw: Update the information of an existing user.
              text: Update the information of an existing user.
              tokens:
                - type: text
                  raw: Update the information of an existing user.
                  text: Update the information of an existing user.
          links: {}
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                    description:
                      type: item
                      title: Hola
                      typeItem: documentation
                      tokens:
                        - type: paragraph
                          raw: If a new email is given, the user's email verified property will be set to
                            false.
                          text: If a new email is given, the user's email verified property will be set to
                            false.
                          tokens:
                            - type: text
                              raw: If a new email is given, the user's email verified property will be set to
                                false.
                              text: If a new email is given, the user&#39;s email verified property will be
                                set to false.
                      links: {}
                  dateOfBirth:
                    type: string
              examples:
                Update First Name:
                  value:
                    firstName: Rebecca
                Update Email:
                  value:
                    email: rebecca@gmail.com
                Update Last Name & Date of Birth:
                  value:
                    lastName: Baker
                    dateOfBirth: 1985-10-02
          description:
            type: item
            title: Hola
            typeItem: documentation
            tokens:
              - type: paragraph
                raw: Patch user properties to update.
                text: Patch user properties to update.
                tokens:
                  - type: text
                    raw: Patch user properties to update.
                    text: Patch user properties to update.
            links: {}
    /user:
      post:
        summary: Create New User
        operationId: post-user
        responses:
          \\"200\\":
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: User Created
                  text: User Created
                  tokens:
                    - type: text
                      raw: User Created
                      text: User Created
              links: {}
            content:
              application/json:
                schema:
                  title: User
                  type: object
                  description:
                    type: item
                    title: Hola
                    typeItem: documentation
                    tokens: []
                    links: {}
                  examples:
                    - id: 142
                      firstName: Alice
                      lastName: Smith
                      email: alice.smith@gmail.com
                      dateOfBirth: 1997-10-31
                      emailVerified: true
                      signUpDate: 2019-08-24
                  properties:
                    id:
                      type: integer
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: Unique identifier for the given user.
                            text: Unique identifier for the given user.
                            tokens:
                              - type: text
                                raw: Unique identifier for the given user.
                                text: Unique identifier for the given user.
                        links: {}
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                      format: email
                    dateOfBirth:
                      type: string
                      format: date
                      example: 1997-10-31
                    emailVerified:
                      type: boolean
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: Set to true if the user's email has been verified.
                            text: Set to true if the user's email has been verified.
                            tokens:
                              - type: text
                                raw: Set to true if the user's email has been verified.
                                text: Set to true if the user&#39;s email has been verified.
                        links: {}
                    createDate:
                      type: string
                      format: date
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: The date that the user was created.
                            text: The date that the user was created.
                            tokens:
                              - type: text
                                raw: The date that the user was created.
                                text: The date that the user was created.
                        links: {}
                  required:
                    - id
                    - firstName
                    - lastName
                    - email
                    - emailVerified
                examples:
                  New User Bob Fellow:
                    value:
                      id: 12
                      firstName: Bob
                      lastName: Fellow
                      email: bob.fellow@gmail.com
                      dateOfBirth: 1996-08-24
                      emailVerified: false
                      createDate: 2020-11-18
          \\"400\\":
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: Missing Required Information
                  text: Missing Required Information
                  tokens:
                    - type: text
                      raw: Missing Required Information
                      text: Missing Required Information
              links: {}
          \\"409\\":
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: Email Already Taken
                  text: Email Already Taken
                  tokens:
                    - type: text
                      raw: Email Already Taken
                      text: Email Already Taken
              links: {}
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  dateOfBirth:
                    type: string
                    format: date
                required:
                  - firstName
                  - lastName
                  - email
                  - dateOfBirth
              examples:
                Create User Bob Fellow:
                  value:
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: 1996-08-24
          description:
            type: item
            title: Hola
            typeItem: documentation
            tokens:
              - type: paragraph
                raw: Post the necessary fields for the API to create a new user.
                text: Post the necessary fields for the API to create a new user.
                tokens:
                  - type: text
                    raw: Post the necessary fields for the API to create a new user.
                    text: Post the necessary fields for the API to create a new user.
            links: {}
        description:
          type: item
          title: Hola
          typeItem: documentation
          tokens:
            - type: paragraph
              raw: Create a new user.
              text: Create a new user.
              tokens:
                - type: text
                  raw: Create a new user.
                  text: Create a new user.
          links: {}
    \\"/car/{lk}\\":
      post:
        summary: Create Car
        operationId: post-car
        responses:
          \\"200\\":
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: Car Section
                  text: Car Section
                  tokens:
                    - type: text
                      raw: Car Section
                      text: Car Section
              links: {}
            content:
              application/json:
                schema:
                  $schema: http://json-schema.org/draft-07/schema
                  type: object
                  title: Car
                  properties:
                    roles:
                      type: number
                      title: roles
                      description:
                        type: item
                        title: Hola
                        typeItem: documentation
                        tokens:
                          - type: paragraph
                            raw: Roles number
                            text: Roles number
                            tokens:
                              - type: text
                                raw: Roles number
                                text: Roles number
                        links: {}
                    color:
                      type: string
                      enum:
                        - red
                        - green
        x-internal: true
        description:
          type: item
          title: Hola
          typeItem: documentation
          tokens:
            - type: paragraph
              raw: hjklhkj
              text: hjklhkj
              tokens:
                - type: text
                  raw: hjklhkj
                  text: hjklhkj
          links: {}
        deprecated: true
      parameters:
        - schema:
            type: string
          name: lk
          in: path
          required: true
  components:
    schemas:
      User:
        title: User
        type: object
        description:
          type: item
          title: Hola
          typeItem: documentation
          tokens: []
          links: {}
        examples:
          - id: 142
            firstName: Alice
            lastName: Smith
            email: alice.smith@gmail.com
            dateOfBirth: 1997-10-31
            emailVerified: true
            signUpDate: 2019-08-24
        properties:
          id:
            type: integer
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: Unique identifier for the given user.
                  text: Unique identifier for the given user.
                  tokens:
                    - type: text
                      raw: Unique identifier for the given user.
                      text: Unique identifier for the given user.
              links: {}
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
            format: email
          dateOfBirth:
            type: string
            format: date
            example: 1997-10-31
          emailVerified:
            type: boolean
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: Set to true if the user's email has been verified.
                  text: Set to true if the user's email has been verified.
                  tokens:
                    - type: text
                      raw: Set to true if the user's email has been verified.
                      text: Set to true if the user&#39;s email has been verified.
              links: {}
          createDate:
            type: string
            format: date
            description:
              type: item
              title: Hola
              typeItem: documentation
              tokens:
                - type: paragraph
                  raw: The date that the user was created.
                  text: The date that the user was created.
                  tokens:
                    - type: text
                      raw: The date that the user was created.
                      text: The date that the user was created.
              links: {}
        required:
          - id
          - firstName
          - lastName
          - email
          - emailVerified
"
`;
